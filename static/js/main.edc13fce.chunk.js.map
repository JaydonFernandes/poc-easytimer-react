{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","timerType","setTimerType","pomodoroTime","shortBreakTime","longBreakTime","Timer","timer","time","setTime","clockMinutes","setClockMinutes","clockSeconds","setClockSeconds","isPaused","setIsPaused","zeroPad","num","places","String","padStart","useEffect","document","title","addEventListener","e","getTimeValues","minutes","seconds","console","log","stop","start","countdown","startValues","reset","pause","className","style","textAlign","ButtonGroup","variant","aria-label","Button","onClick","color","Typography","margin","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.edc13fce.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport Button from \"@material-ui/core/Button\"\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\"\nimport Typography from \"@material-ui/core/Typography\"\n\nimport Timer from 'easytimer.js';\nimport 'fontsource-roboto';\n\nfunction App() {\n\n  const [timerType, setTimerType] = useState(\"pomodoro\");\n  const [pomodoroTime, setPomodoroTime] = useState(25);\n  const [shortBreakTime, setShortBreakTime] = useState(5);\n  const [longBreakTime, setLongBreakTime] = useState(15);\n\n  const [timer] = useState(new Timer())\n  const [time, setTime] = useState(pomodoroTime);\n  const [clockMinutes, setClockMinutes] = useState(time);\n  const [clockSeconds, setClockSeconds] = useState(0);\n  const [isPaused, setIsPaused] = useState(true);\n\n  \n\n  const zeroPad = (num, places) => String(num).padStart(places, '0');\n\n  useEffect(() => {\n    document.title = (clockMinutes+\":\"+zeroPad(clockSeconds, 2));\n  });\n\n  useEffect(() => {\n    timer.addEventListener('secondsUpdated', function (e) {\n      // setTime(timer.getTimeValues().toString());\n      setClockMinutes(timer.getTimeValues().minutes)\n      setClockSeconds(timer.getTimeValues().seconds)\n    });\n\n    timer.addEventListener('reset', function (e) {\n      setClockMinutes(timer.getTimeValues().minutes)\n      setClockSeconds(timer.getTimeValues().seconds)\n     \n    });\n\n  }, []);\n\n  useEffect(() => {\n    if (timerType === \"pomodoro\"){\n      setTime(pomodoroTime);\n    }else if ( timerType === \"shortBreak\"){\n      setTime(shortBreakTime);\n    }else{\n      setTime(longBreakTime);\n    }\n  }, [timerType]);\n\n  useEffect(() => {\n\n    console.log(\"Time: \"+time)\n    timer.stop();\n    timer.start({countdown: true, startValues: {minutes: time}});\n    timer.reset();\n    timer.pause();\n    setIsPaused(true);\n  }, [time]);\n\n  var resetClock = function(){\n    timer.start({countdown: true, startValues: {minutes: time}});\n    timer.reset();\n    timer.pause();\n    setIsPaused(true);\n  }\n\n  var toggleStart = function(){\n    if (isPaused){\n      timer.start({countdown: true, startValues: {minutes: time}});\n      setIsPaused(false);\n    }else{\n      timer.pause();\n      setIsPaused(true);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n\n      <div style={{ textAlign: \"center\"}}>\n        <ButtonGroup variant=\"contained\" aria-label=\"contained primary button group\">\n          <Button onClick={()=>{setTimerType(\"pomodoro\")}} color={timerType === \"pomodoro\"? \"primary\": \"default\"}>Pomodoro</Button>\n          <Button onClick={()=>{setTimerType(\"shortBreak\")}} color={timerType === \"shortBreak\"? \"primary\": \"default\"}>Short Break</Button>\n          <Button onClick={()=>{setTimerType(\"longBreak\")}} color={timerType === \"longBreak\"? \"primary\": \"default\"}>Long Break</Button>\n        </ButtonGroup>\n\n        <Typography variant='h3'>\n          {clockMinutes} : {zeroPad(clockSeconds, 2)} \n        </Typography>\n\n        <Button style={{margin: \"1rem\"}} color=\"secondary\" onClick={toggleStart} variant=\"contained\">{isPaused ? \"Play\" : \"Pause\"}</Button>\n        <Button color=\"secondary\" onClick={resetClock} variant=\"contained\">Restart</Button>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}