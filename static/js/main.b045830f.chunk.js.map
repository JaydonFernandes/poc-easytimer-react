{"version":3,"sources":["components/SettingsDialog.js","assets/soundEffects/click.mp4","assets/soundEffects/complete.mp4","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["makeStyles","avatar","backgroundColor","blue","color","SettingsDialog","props","onClose","open","pomodoroTime","shortBreakTime","longBreakTime","longBreakInterval","autoStartRound","setPomodoroTime","setShortBreakTime","setLongBreakTime","setLongBreakInterval","setAutoStartRound","useState","tempPomodoroTime","setTempPomodoroTime","tempShortBreakTime","setTempShortBreakTime","tempLongBreakTime","setTempLongBreakTime","tempLongBreakInterval","setTempLongBreakInterval","tempAutoStartRound","setTempAutoStartRound","Dialog","aria-labelledby","DialogTitle","id","DialogContent","style","display","justifyContent","TextField","label","type","InputLabelProps","shrink","margin","width","variant","defaultValue","onChange","e","parseInt","target","value","min","InputProps","inputProps","max","Divider","FormControlLabel","control","labelPlacement","Switch","checked","name","DialogActions","Button","onClick","App","useSound","clickSfx","playClickSfx","completeSfx","playCompleteSfx","timerType","setTimerType","localStorage","getItem","Timer","timer","time","setTime","clockMinutes","setClockMinutes","clockSeconds","setClockSeconds","isPaused","setIsPaused","pomodorosComplete","setPomodorosComplete","secondsPassed","setSecondsPassed","zeroPad","num","places","String","padStart","useEffect","document","title","console","log","getTimeValues","minutes","seconds","addEventListener","stop","start","countdown","startValues","reset","pause","minutesGained","setItem","mins","secs","toggleStart","PlayPauseButton","IconButton","aria-label","fontSize","React","setOpen","className","minHeight","Container","textAlign","marginBottom","marginTop","fontFamily","startIcon","Card","CardContent","ButtonGroup","styles","buildStyles","pathColor","Typography","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uVAckBA,YAAW,CAC3BC,OAAQ,CACNC,gBAAiBC,IAAK,KACtBC,MAAOD,IAAK,QAwJCE,MApJjB,SAAwBC,GAAQ,IAEpBC,EAAiMD,EAAjMC,QAASC,EAAwLF,EAAxLE,KAAMC,EAAkLH,EAAlLG,aAAcC,EAAoKJ,EAApKI,eAAgBC,EAAoJL,EAApJK,cAAeC,EAAqIN,EAArIM,kBAAmBC,EAAkHP,EAAlHO,eAAgBC,EAAkGR,EAAlGQ,gBAAiBC,EAAiFT,EAAjFS,kBAAmBC,EAA8DV,EAA9DU,iBAAkBC,EAA4CX,EAA5CW,qBAAsBC,EAAsBZ,EAAtBY,kBAFxJ,EAIqBC,mBAASV,GAJ9B,mBAIpBW,EAJoB,KAIFC,EAJE,OAKyBF,mBAAST,GALlC,mBAKpBY,EALoB,KAKAC,EALA,OAMuBJ,mBAASR,GANhC,mBAMpBa,EANoB,KAMDC,EANC,OAO+BN,mBAASP,GAPxC,mBAOpBc,EAPoB,KAOGC,EAPH,OAQyBR,mBAASN,GARlC,mBAQpBe,EARoB,KAQAC,EARA,KAyB3B,OACI,eAACC,EAAA,EAAD,CAAQvB,QAfQ,WAChBA,KAc8BwB,kBAAgB,wBAAwBvB,KAAMA,EAA5E,UACI,cAACwB,EAAA,EAAD,CAAaC,GAAG,wBAAhB,sBAGA,cAACC,EAAA,EAAD,UAEI,gCAEI,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBAA/C,UACI,cAACC,EAAA,EAAD,CACIC,MAAM,gBACNC,KAAK,SACLC,gBAAiB,CACbC,QAAQ,GAGZC,OAAO,SACPR,MAAO,CAACS,MAAO,OACfC,QAAQ,WACRC,aAAcrC,EACdsC,SAAU,SAACC,GAAOC,SAASD,EAAEE,OAAOC,QAAU,GAAQF,SAASD,EAAEE,OAAOC,QAAU,GAAO9B,EAAoB4B,SAASD,EAAEE,OAAOC,QAAW9B,EAAoB4B,SAASxC,OAE3K,cAAC6B,EAAA,EAAD,CACIC,MAAM,mBACNC,KAAK,SACLC,gBAAiB,CACbC,QAAQ,GAGZC,OAAO,SACPS,IAAI,IACJP,QAAQ,WACRV,MAAO,CAACS,MAAO,OACfE,aAAcpC,EACdqC,SAAU,SAACC,GAAOC,SAASD,EAAEE,OAAOC,QAAU,GAAQF,SAASD,EAAEE,OAAOC,QAAU,GAAO5B,EAAsB0B,SAASD,EAAEE,OAAOC,QAAW5B,EAAsB0B,SAASvC,OAE/K,cAAC4B,EAAA,EAAD,CACIM,MAAM,KACNL,MAAM,kBACNC,KAAK,SACLC,gBAAiB,CACbC,QAAQ,GAEZW,WAAY,CACRC,WAAY,CACRC,IAAK,GAAIH,IAAK,IAItBT,OAAO,SACPE,QAAQ,WACRV,MAAO,CAACS,MAAO,OACfE,aAAcnC,EACdoC,SAAU,SAACC,GAAOC,SAASD,EAAEE,OAAOC,QAAU,GAAQF,SAASD,EAAEE,OAAOC,QAAU,GAAO1B,EAAqBwB,SAASD,EAAEE,OAAOC,QAAW1B,EAAqBwB,SAAStC,UAIjL,cAAC6C,EAAA,EAAD,CAASX,QAAQ,SAASV,MAAO,CAACQ,OAAQ,UAE1C,8BAEA,cAACc,EAAA,EAAD,CACIC,QACI,cAACpB,EAAA,EAAD,CACIM,MAAM,KACNJ,KAAK,SACLC,gBAAiB,CACbC,QAAQ,GAEZW,WAAY,CACRC,WAAY,CACRC,IAAK,GAAIH,IAAK,IAItBT,OAAO,SACPR,MAAO,CAACQ,OAAQ,SAChBG,aAAclC,EACdmC,SAAU,SAACC,GAAOC,SAASD,EAAEE,OAAOC,QAAU,EAAKxB,EAAyBsB,SAASD,EAAEE,OAAOC,QAAWxB,EAAyBsB,SAASrC,OAInJ2B,MAAM,uBACNoB,eAAe,YAMnB,cAACH,EAAA,EAAD,CAASX,QAAQ,SAASV,MAAO,CAACQ,OAAQ,UAE1C,8BACI,cAACc,EAAA,EAAD,CACIC,QACA,cAACE,EAAA,EAAD,CACIC,QAASjC,EACTmB,SAAU,SAACI,GAAStB,GAAuBD,IAC3CkC,KAAK,WACL1D,MAAM,YAGVmC,MAAM,yBACNoB,eAAe,iBAU/B,cAACI,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQC,QA5HC,WAEjBnD,EAAgBM,GAChBL,EAAkBO,GAClBN,EAAiBQ,GACjBP,EAAqBS,GACrBR,EAAkBU,GAClBrB,KAqHuCH,MAAM,UAArC,wB,0JChKD,MAA0B,kCCA1B,MAA0B,qC,cC4R1B8D,MA5Pf,WAAgB,IAAD,EAEUC,YAASC,GAAzBC,EAFM,sBAGaF,YAASG,GAA5BC,EAHM,sBAKqBpD,mBAAS,YAL9B,mBAKNqD,EALM,KAKKC,EALL,OAM2BtD,mBAASuD,aAAaC,QAAQ,gBAAkB1B,SAASyB,aAAaC,QAAQ,iBAAkB,IAN3H,mBAMNlE,EANM,KAMQK,EANR,OAO+BK,mBAASuD,aAAaC,QAAQ,kBAAoB1B,SAASyB,aAAaC,QAAQ,mBAAoB,GAPnI,mBAONjE,EAPM,KAOUK,EAPV,OAQ6BI,mBAASuD,aAAaC,QAAQ,iBAAmB1B,SAASyB,aAAaC,QAAQ,kBAAmB,IAR/H,mBAQNhE,EARM,KAQSK,EART,OAUGG,mBAAS,IAAIyD,KAAtBC,EAVM,sBAWW1D,mBAASV,GAXpB,mBAWNqE,EAXM,KAWAC,EAXA,OAY2B5D,mBAAS2D,GAZpC,mBAYNE,EAZM,KAYQC,EAZR,OAa2B9D,mBAAS,GAbpC,mBAaN+D,EAbM,KAaQC,GAbR,QAcmBhE,oBAAS,GAd5B,qBAcNiE,GAdM,MAcIC,GAdJ,SAeqClE,mBAASuD,aAAaC,QAAQ,qBAAuB1B,SAASyB,aAAaC,QAAQ,sBAAuB,GAf/I,qBAeN/D,GAfM,MAeaK,GAfb,SAgBqCE,mBAAS,GAhB9C,qBAgBNmE,GAhBM,MAgBaC,GAhBb,SAiB6BpE,mBAAS,GAjBtC,qBAiBNqE,GAjBM,MAiBSC,GAjBT,SAmB+BtE,mBAAqD,SAA3CuD,aAAaC,QAAQ,mBAnB9D,qBAmBN9D,GAnBM,MAmBUK,GAnBV,MAqBPwE,GAAU,SAACC,EAAKC,GAAN,OAAiBC,OAAOF,GAAKG,SAASF,EAAQ,MAE9DG,qBAAU,WACRC,SAASC,MAASjB,EAAa,IAAIU,GAAQR,EAAc,GAErDE,KACFc,QAAQC,IAAY,GAALrB,GAA0C,GAA9BD,EAAMuB,gBAAgBC,QAAYnB,IAC7DO,GAAyB,GAALX,GAAyB,GAAbE,EAAiBE,KAI7CL,EAAMuB,gBAAgBC,SAAS,GAAOxB,EAAMuB,gBAAgBE,SAAS,GAAOtB,GAAgB,IAChGT,IAEkB,aAAdC,GACFe,GAAqBD,GAAoB,GAMvCb,GADKa,GAAoB,GAAK1E,KAAuB,EACxC,YAEA,eAGf6D,EAAa,eAGhB,CAACS,EAAcF,IAElBe,qBAAU,cACP,CAACP,KAEJO,qBAAU,WACRlB,EAAM0B,iBAAiB,kBAAkB,SAAUvD,GACjDiC,EAAgBJ,EAAMuB,gBAAgBC,SACtClB,GAAgBN,EAAMuB,gBAAgBE,YAGxCzB,EAAM0B,iBAAiB,SAAS,SAAUvD,GACxCiC,EAAgBJ,EAAMuB,gBAAgBC,SACtClB,GAAgBN,EAAMuB,gBAAgBE,cAGvC,IAEHP,qBAAU,WAERlB,EAAM2B,OACY,aAAdhC,GACFO,EAAQtE,GACRoE,EAAM4B,MAAM,CAACC,WAAW,EAAMC,YAAa,CAACN,QAAS5F,KACrDgF,GAAiB,IAEM,eAAdjB,GACTO,EAAQrE,GACRmE,EAAM4B,MAAM,CAACC,WAAW,EAAMC,YAAa,CAACN,QAAS3F,KACrD+E,GAAiB,KAGjBV,EAAQpE,GACRkE,EAAM4B,MAAM,CAACC,WAAW,EAAMC,YAAa,CAACN,QAAS1F,KACrD8E,GAAiB,IAGnBZ,EAAM+B,QAED/F,KACHgE,EAAMgC,QACNxB,IAAY,MAIb,CAACb,IAIJuB,qBAAU,WAKR,IAAIe,EAJJpC,aAAaqC,QAAQ,eAAgBtG,GACrCiE,aAAaqC,QAAQ,iBAAkBrG,GACvCgE,aAAaqC,QAAQ,gBAAiBpG,GAGpB,aAAd6D,GACFO,EAAQtE,GACRqG,EAAgBrG,EAAeqE,GACV,eAAdN,GACPO,EAAQrE,GACRoG,EAAgBpG,EAAiBoE,IAEjCC,EAAQpE,GACRmG,EAAgBnG,EAAgBmE,GAGlC,IAAIkC,EAAOnC,EAAMuB,gBAAgBC,QAC7BY,EAAOpC,EAAMuB,gBAAgBE,QAEjCzB,EAAM2B,OAECQ,EAAOF,GAAgB,GAAOG,GAAQ,GAAWD,EAAOF,EAAe,GAC5EjC,EAAM4B,MAAM,CAACC,WAAW,EAAMC,YAAa,CAACN,QAAS,EAAGC,QAAS,KACjEb,GAAiB,KAEjBZ,EAAM4B,MAAM,CAACC,WAAW,EAAMC,YAAa,CAACN,QAAUW,EAAOF,EAAgBR,QAASW,KACtFhC,EAAgB+B,EAAOF,GACvB3B,GAAgB8B,IAGd7B,IACFP,EAAMgC,UAGP,CAACpG,EAAcC,EAAgBC,IAElCoF,qBAAU,WACRrB,aAAaqC,QAAQ,oBAAqBnG,MACzC,CAACA,KAEJmF,qBAAU,WACRrB,aAAaqC,QAAQ,iBAAkBlG,MACtC,CAACA,KAEJ,IASIqG,GAAc,WAChB7C,IACIe,IACFP,EAAM4B,MAAM,CAACC,WAAW,EAAMC,YAAa,CAACN,QAASvB,KACrDO,IAAY,KAEZR,EAAMgC,QACNxB,IAAY,KAIhB,SAAS8B,GAAgB7G,GACvB,OAAI8E,GACK,cAACgC,EAAA,EAAD,CAAYC,aAAW,OAAOpD,QAASiD,GAAvC,SAAoD,cAAC,IAAD,CAAU/E,MAAO,CAAEmF,SAAU,QAEnF,cAACF,EAAA,EAAD,CAAYC,aAAW,QAASpD,QAASiD,GAAzC,SAAsD,cAAC,IAAD,CAAW/E,MAAO,CAAEmF,SAAU,QAxKhF,OA2KWC,IAAMpG,UAAS,GA3K1B,qBA2KNX,GA3KM,MA2KAgH,GA3KA,MAqLb,OACE,sBAAKC,UAAU,MAAMtF,MAAO,CAAEuF,UAAW,QAAzC,UACE,cAACC,EAAA,EAAD,UAEE,sBAAKxF,MAAO,CAAEyF,UAAW,UAAzB,UAEE,sBAAKzF,MAAO,CAACC,QAAS,OAAQC,eAAgB,gBAAiBwF,aAAc,OAAQC,UAAW,QAAhG,UAEE,oBAAI3F,MAAO,CAAC4F,WAAY,UAAxB,sBAIA,cAAC/D,EAAA,EAAD,CAASgE,UAAW,cAAC,IAAD,IAAkB7F,MAAO,CAACQ,OAAQ,QAASsB,QApBjD,WACtBuD,IAAQ,IAmByF3E,QAAQ,YAAjG,yBAIF,cAACoF,EAAA,EAAD,CAAM9F,MAAO,CAACjC,gBAAgB,cAA9B,SACE,eAACgI,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAatF,QAAQ,YAAYwE,aAAW,iCAAiClF,MAAO,CAAC0F,aAAc,OAAQjF,MAAO,QAAlH,UACE,cAACoB,EAAA,EAAD,CAAQC,QAAS,WAAKQ,EAAa,aAActC,MAAO,CAACS,MAAO,QAASxC,MAAqB,aAAdoE,EAA0B,UAAW,UAArH,sBACA,cAACR,EAAA,EAAD,CAAQC,QAAS,WAAKQ,EAAa,eAAgBtC,MAAO,CAACS,MAAO,QAASxC,MAAqB,eAAdoE,EAA4B,UAAW,UAAzH,yBACA,cAACR,EAAA,EAAD,CAAQC,QAAS,WAAKQ,EAAa,cAAetC,MAAO,CAACS,MAAO,QAASxC,MAAqB,cAAdoE,EAA2B,UAAW,UAAvH,2BAKF,cAAC,IAAD,CACErB,MAAUqC,IAAqB,GAALV,GAAU,IACpCsD,OAAQC,YAAY,CAClBC,UAAW,YAHf,SAOE,eAACC,EAAA,EAAD,CAAY1F,QAAQ,KAApB,UACGmC,EADH,MACoBU,GAAQR,EAAc,QAI5C,cAACiC,GAAD,CAAiBlD,QAASiD,KAC1B,cAACE,EAAA,EAAD,CAAYC,aAAW,SAASpD,QA5E3B,WACfI,IACAoB,GAAiB,GACjBZ,EAAM4B,MAAM,CAACC,WAAW,EAAMC,YAAa,CAACN,QAASvB,KACrDD,EAAM+B,QACN/B,EAAMgC,QACNxB,IAAY,IAsEF,SAAqD,cAAC,IAAD,CAAYlD,MAAO,CAAEmF,SAAU,kBAY5F,cAAC,EAAD,CACI7G,aAAcA,EACdC,eAAgBA,EAChBC,cAAeA,EACfC,kBAAmBA,GACnBC,eAAgBA,GAEhBC,gBAAiBA,EACjBC,kBAAmBA,EACnBC,iBAAkBA,EAClBC,qBAAsBA,GACtBC,kBAAmBA,GAEnBV,KAAMA,GACND,QArEY,SAAC4C,GACnBqE,IAAQ,UCtMQgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxD,SAASyD,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAACa,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN9D,QAAQ8D,MAAMA,EAAMC,YE/G5BpB,M","file":"static/js/main.b045830f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch'\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SettingsDialog(props) {\r\n\r\n    const { onClose, open, pomodoroTime, shortBreakTime, longBreakTime, longBreakInterval, autoStartRound, setPomodoroTime, setShortBreakTime, setLongBreakTime, setLongBreakInterval, setAutoStartRound } = props;\r\n\r\n    const [tempPomodoroTime, setTempPomodoroTime] = useState(pomodoroTime);\r\n    const [tempShortBreakTime, setTempShortBreakTime] = useState(shortBreakTime);\r\n    const [tempLongBreakTime, setTempLongBreakTime] = useState(longBreakTime);\r\n    const [tempLongBreakInterval, setTempLongBreakInterval] = useState(longBreakInterval)\r\n    const [tempAutoStartRound, setTempAutoStartRound] = useState(autoStartRound)\r\n\r\n\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    const updateValues = function(){\r\n\r\n        setPomodoroTime(tempPomodoroTime)\r\n        setShortBreakTime(tempShortBreakTime)\r\n        setLongBreakTime(tempLongBreakTime)\r\n        setLongBreakInterval(tempLongBreakInterval)\r\n        setAutoStartRound(tempAutoStartRound)\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"settings-dialog-title\" open={open} >\r\n            <DialogTitle id=\"settings-dialog-title\">Settings</DialogTitle>\r\n            \r\n\r\n            <DialogContent >\r\n\r\n                <div>\r\n                    \r\n                    <div style={{ display: \"flex\", justifyContent: \"space-between\"}}>\r\n                        <TextField\r\n                            label=\"Pomodoro Time\"\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n\r\n                            margin=\"normal\"\r\n                            style={{width: \"30%\"}}\r\n                            variant=\"outlined\"\r\n                            defaultValue={pomodoroTime}\r\n                            onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempPomodoroTime(parseInt(e.target.value)) :  setTempPomodoroTime(parseInt(pomodoroTime))}}\r\n                        />\r\n                        <TextField\r\n                            label=\"Short Break Time\"\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            \r\n                            margin=\"normal\"\r\n                            min=\"1\"\r\n                            variant=\"outlined\"\r\n                            style={{width: \"30%\"}}\r\n                            defaultValue={shortBreakTime}\r\n                            onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempShortBreakTime(parseInt(e.target.value)) :  setTempShortBreakTime(parseInt(shortBreakTime))}}\r\n                        />\r\n                        <TextField\r\n                            width='sm'\r\n                            label=\"Long Break Time\"\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            InputProps={{\r\n                                inputProps: { \r\n                                    max: 60, min: 1\r\n                                }\r\n                            }}\r\n                        \r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            style={{width: \"30%\"}}\r\n                            defaultValue={longBreakTime}\r\n                            onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempLongBreakTime(parseInt(e.target.value)) :  setTempLongBreakTime(parseInt(longBreakTime))}}\r\n                        />\r\n                    </div>\r\n\r\n                    <Divider variant=\"middle\" style={{margin: \"1rem\"}}/>\r\n                        \r\n                    <div>\r\n\r\n                    <FormControlLabel\r\n                        control={\r\n                            <TextField\r\n                                width='sm'\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                InputProps={{\r\n                                    inputProps: { \r\n                                        max: 60, min: 1\r\n                                    }\r\n                                }}\r\n                            \r\n                                margin=\"normal\"\r\n                                style={{margin: \".5rem\"}}\r\n                                defaultValue={longBreakInterval}\r\n                                onChange={(e)=>{ (parseInt(e.target.value) >= 1) ? setTempLongBreakInterval(parseInt(e.target.value)) :  setTempLongBreakInterval(parseInt(longBreakInterval))}}\r\n                            />\r\n                        }\r\n                    \r\n                        label=\"Long Break Interval:\"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                        \r\n                        \r\n                    </div>\r\n\r\n                    <Divider variant=\"middle\" style={{margin: \"1rem\"}}/>\r\n                        \r\n                    <div>\r\n                        <FormControlLabel\r\n                            control={\r\n                            <Switch\r\n                                checked={tempAutoStartRound}\r\n                                onChange={(value)=>{setTempAutoStartRound(!tempAutoStartRound)}}\r\n                                name=\"checkedB\"\r\n                                color=\"primary\"\r\n                            />\r\n                            }\r\n                            label=\"Auto start next round?\"\r\n                            labelPlacement=\"start\"\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                \r\n\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={updateValues} color=\"primary\">\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        \r\n        </Dialog>\r\n    );\r\n  }\r\n  \r\n  export default SettingsDialog;\r\n  ","export default __webpack_public_path__ + \"static/media/click.38da6178.mp4\";","export default __webpack_public_path__ + \"static/media/complete.8b65bc34.mp4\";","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport SettingsDialog from \"./components/SettingsDialog\"\nimport { Divider, Typography, ButtonGroup, Button, Container } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport IconButton from '@material-ui/core/IconButton';\n\nimport PlayIcon from '@material-ui/icons/PlayArrowRounded';\nimport PauseIcon from '@material-ui/icons/PauseRounded';\nimport ReplayIcon from '@material-ui/icons/ReplayRounded';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nimport Timer from 'easytimer.js';\nimport 'fontsource-roboto';\n\nimport useSound from 'use-sound';\nimport clickSfx from \"./assets/soundEffects/click.mp4\"\nimport completeSfx from \"./assets/soundEffects/complete.mp4\"\n\nimport {\n  CircularProgressbar,\n  CircularProgressbarWithChildren,\n  buildStyles\n} from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nimport purple from '@material-ui/core/colors/';\n\nfunction App() {\n\n  const [playClickSfx] = useSound(clickSfx);\n  const [playCompleteSfx] = useSound(completeSfx);\n\n  const [timerType, setTimerType] = useState(\"pomodoro\");\n  const [pomodoroTime, setPomodoroTime] = useState(localStorage.getItem('pomodoroTime') ? parseInt(localStorage.getItem('pomodoroTime')): 25);\n  const [shortBreakTime, setShortBreakTime] = useState(localStorage.getItem('shortBreakTime') ? parseInt(localStorage.getItem('shortBreakTime')): 5);\n  const [longBreakTime, setLongBreakTime] = useState(localStorage.getItem('longBreakTime') ? parseInt(localStorage.getItem('longBreakTime')): 15);\n\n  const [timer] = useState(new Timer())\n  const [time, setTime] = useState(pomodoroTime);\n  const [clockMinutes, setClockMinutes] = useState(time);\n  const [clockSeconds, setClockSeconds] = useState(0);\n  const [isPaused, setIsPaused] = useState(true);\n  const [longBreakInterval, setLongBreakInterval] = useState(localStorage.getItem('longBreakInterval') ? parseInt(localStorage.getItem('longBreakInterval')): 4);\n  const [pomodorosComplete, setPomodorosComplete] = useState(0);\n  const [secondsPassed, setSecondsPassed] = useState(0);\n\n  const [autoStartRound, setAutoStartRound] = useState((localStorage.getItem('autoStartRound') === \"true\") ? true: false);\n\n  const zeroPad = (num, places) => String(num).padStart(places, '0');\n\n  useEffect(() => {\n    document.title = (clockMinutes+\":\"+zeroPad(clockSeconds, 2))\n    \n    if(!isPaused){\n      console.log( ((time*60)-( (timer.getTimeValues().minutes*60)+clockSeconds)) )\n      setSecondsPassed( ((time*60)-( (clockMinutes*60)+clockSeconds)) )\n      // setSecondsPassed(secondsPassed+1)\n    }\n    \n    if ( (timer.getTimeValues().minutes<=0) && (timer.getTimeValues().seconds<=0) && (clockMinutes <= 0)){\n      playCompleteSfx();\n      \n      if (timerType === \"pomodoro\"){\n        setPomodorosComplete(pomodorosComplete + 1)\n\n        \n\n\n        if ( ((pomodorosComplete + 1) % longBreakInterval) === 0 ){\n          setTimerType(\"longBreak\")\n        }else{\n          setTimerType(\"shortBreak\")\n        }\n      }else{\n        setTimerType(\"pomodoro\")\n      }\n    }\n  }, [clockSeconds, clockMinutes]);\n\n  useEffect(() => {\n  }, [secondsPassed]);\n\n  useEffect(() => {\n    timer.addEventListener('secondsUpdated', function (e) {\n      setClockMinutes(timer.getTimeValues().minutes)\n      setClockSeconds(timer.getTimeValues().seconds)\n    });\n\n    timer.addEventListener('reset', function (e) {\n      setClockMinutes(timer.getTimeValues().minutes)\n      setClockSeconds(timer.getTimeValues().seconds)\n     \n    });\n  }, []);\n\n  useEffect(() => {\n\n    timer.stop();\n    if (timerType === \"pomodoro\"){\n      setTime(pomodoroTime);\n      timer.start({countdown: true, startValues: {minutes: pomodoroTime}});\n      setSecondsPassed(0)\n\n    }else if ( timerType === \"shortBreak\"){\n      setTime(shortBreakTime);\n      timer.start({countdown: true, startValues: {minutes: shortBreakTime}});\n      setSecondsPassed(0)\n\n    }else{\n      setTime(longBreakTime);\n      timer.start({countdown: true, startValues: {minutes: longBreakTime}});\n      setSecondsPassed(0)\n    }\n\n    timer.reset();\n\n    if (!autoStartRound){\n      timer.pause();\n      setIsPaused(true);\n    }\n    \n\n  }, [timerType]);\n\n\n\n  useEffect(() => {\n    localStorage.setItem('pomodoroTime', pomodoroTime);\n    localStorage.setItem('shortBreakTime', shortBreakTime);\n    localStorage.setItem('longBreakTime', longBreakTime);\n\n    var minutesGained\n    if (timerType === \"pomodoro\"){\n      setTime(pomodoroTime)\n      minutesGained = pomodoroTime - time;\n    }else if(timerType === \"shortBreak\"){\n      setTime(shortBreakTime)\n      minutesGained = shortBreakTime - time;\n    }else{\n      setTime(longBreakTime)\n      minutesGained = longBreakTime - time;\n    }\n\n    var mins = timer.getTimeValues().minutes\n    var secs = timer.getTimeValues().seconds\n\n    timer.stop();\n\n    if( (((mins + minutesGained)<=0) && (secs <= 0)) || ( ((mins + minutesGained)<0) ) ){\n      timer.start({countdown: true, startValues: {minutes: 0, seconds: 1}});\n      setSecondsPassed(0)\n    }else{\n      timer.start({countdown: true, startValues: {minutes: (mins + minutesGained), seconds: secs}});\n      setClockMinutes(mins + minutesGained)\n      setClockSeconds(secs) \n    }\n\n    if (isPaused){\n      timer.pause();\n    }\n    \n  }, [pomodoroTime, shortBreakTime, longBreakTime]);\n\n  useEffect(() => {\n    localStorage.setItem('longBreakInterval', longBreakInterval);\n  }, [longBreakInterval]);\n\n  useEffect(() => {\n    localStorage.setItem('autoStartRound', autoStartRound);\n  }, [autoStartRound]);\n\n  var resetClock = function(){\n    playClickSfx();\n    setSecondsPassed(0)\n    timer.start({countdown: true, startValues: {minutes: time}});\n    timer.reset();\n    timer.pause();\n    setIsPaused(true);\n  }\n\n  var toggleStart = function(){\n    playClickSfx();\n    if (isPaused){\n      timer.start({countdown: true, startValues: {minutes: time}});\n      setIsPaused(false);\n    }else{\n      timer.pause();\n      setIsPaused(true);\n    }\n  }\n\n  function PlayPauseButton(props) {\n    if (isPaused) {\n      return <IconButton aria-label=\"Play\" onClick={toggleStart}><PlayIcon style={{ fontSize: 60 }}/></IconButton>\n    }\n    return <IconButton aria-label=\"Pause\"  onClick={toggleStart}><PauseIcon style={{ fontSize: 60 }}/></IconButton>\n  }\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"App\" style={{ minHeight: \"100%\"}} >\n      <Container >\n\n        <div style={{ textAlign: \"center\"}}>\n\n          <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"auto\", marginTop: \"auto\"}}>\n\n            <h1 style={{fontFamily: 'Roboto'}}>\n              Pomodoro\n            </h1>\n\n            <Button  startIcon={<SettingsIcon />} style={{margin: \"1rem\"}} onClick={handleClickOpen} variant=\"contained\">Settings</Button>\n\n          </div>\n\n          <Card style={{backgroundColor:\"whitesmoke\"}}>\n            <CardContent>\n              <ButtonGroup variant=\"contained\" aria-label=\"contained primary button group\" style={{marginBottom: \"1rem\", width: \"100%\"}}>\n                <Button onClick={()=>{setTimerType(\"pomodoro\")}} style={{width: \"100%\"}} color={timerType === \"pomodoro\"? \"primary\": \"default\"}>Pomodoro</Button>\n                <Button onClick={()=>{setTimerType(\"shortBreak\")}} style={{width: \"100%\"}} color={timerType === \"shortBreak\"? \"primary\": \"default\"}>Short Break</Button>\n                <Button onClick={()=>{setTimerType(\"longBreak\")}} style={{width: \"100%\"}} color={timerType === \"longBreak\"? \"primary\": \"default\"}>Long Break</Button>\n              </ButtonGroup>\n\n              \n\n              <CircularProgressbarWithChildren\n                value={( (secondsPassed)/(time*60))*100}\n                styles={buildStyles({\n                  pathColor: \"#3f51b5\",\n                })}\n                >\n\n                <Typography variant='h1'>\n                  {clockMinutes} : {zeroPad(clockSeconds, 2)} \n                </Typography>\n              </CircularProgressbarWithChildren>\n\n              <PlayPauseButton onClick={toggleStart}/>\n              <IconButton aria-label=\"Replay\" onClick={resetClock}><ReplayIcon style={{ fontSize: 60 }}/></IconButton>\n\n            </CardContent>\n          </Card>\n\n        </div>\n\n        \n        \n       \n        \n      </Container>\n      <SettingsDialog \n          pomodoroTime={pomodoroTime}\n          shortBreakTime={shortBreakTime}\n          longBreakTime={longBreakTime}\n          longBreakInterval={longBreakInterval}\n          autoStartRound={autoStartRound}\n\n          setPomodoroTime={setPomodoroTime}\n          setShortBreakTime={setShortBreakTime}\n          setLongBreakTime={setLongBreakTime}\n          setLongBreakInterval={setLongBreakInterval}\n          setAutoStartRound={setAutoStartRound}\n\n          open={open} \n          onClose={handleClose} />\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}