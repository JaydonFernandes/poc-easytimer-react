{"version":3,"sources":["components/SettingsDialog.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["makeStyles","avatar","backgroundColor","blue","color","SettingsDialog","props","onClose","open","pomodoroTime","shortBreakTime","longBreakTime","setPomodoroTime","setShortBreakTime","setLongBreakTime","useState","tempPomodoroTime","setTempPomodoroTime","tempShortBreakTime","setTempShortBreakTime","tempLongBreakTime","setTempLongBreakTime","Dialog","aria-labelledby","DialogTitle","id","DialogContent","style","textAlign","TextField","label","type","InputLabelProps","shrink","margin","width","variant","defaultValue","onChange","e","parseInt","target","value","min","InputProps","inputProps","max","DialogActions","Button","onClick","App","timerType","setTimerType","localStorage","getItem","Timer","timer","time","setTime","clockMinutes","setClockMinutes","clockSeconds","setClockSeconds","isPaused","setIsPaused","zeroPad","num","places","String","padStart","useEffect","console","log","document","title","getTimeValues","minutes","seconds","addEventListener","stop","start","countdown","startValues","reset","pause","minutesGained","setItem","mins","secs","React","setOpen","className","Container","maxWidth","display","justifyContent","marginBottom","marginTop","Typography","float","Divider","ButtonGroup","aria-label","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.255cbd66.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SettingsDialog(props) {\r\n\r\n    const { onClose, open, pomodoroTime, shortBreakTime, longBreakTime, setPomodoroTime, setShortBreakTime, setLongBreakTime } = props;\r\n\r\n    const [tempPomodoroTime, setTempPomodoroTime] = useState(pomodoroTime);\r\n    const [tempShortBreakTime, setTempShortBreakTime] = useState(shortBreakTime);\r\n    const [tempLongBreakTime, setTempLongBreakTime] = useState(longBreakTime);\r\n\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    const updateValues = function(){\r\n\r\n        setPomodoroTime(tempPomodoroTime)\r\n        setShortBreakTime(tempShortBreakTime)\r\n        setLongBreakTime(tempLongBreakTime)\r\n\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"settings-dialog-title\" open={open} >\r\n            <DialogTitle id=\"settings-dialog-title\">Settings</DialogTitle>\r\n            \r\n\r\n            <DialogContent style={{ textAlign: \"center\"}}>\r\n\r\n                <div>\r\n                    <TextField\r\n                        id=\"outlined-number\"\r\n                        label=\"Pomodoro Time\"\r\n                        type=\"number\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n\r\n                        margin=\"normal\"\r\n                        style={{width: \"30%\", margin: \".5rem\"}}\r\n                        variant=\"outlined\"\r\n                        defaultValue={pomodoroTime}\r\n                        onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempPomodoroTime(parseInt(e.target.value)) :  setTempPomodoroTime(parseInt(pomodoroTime))}}\r\n                    />\r\n                    <TextField\r\n                        id=\"outlined-number\"\r\n                        label=\"Short Break Time\"\r\n                        type=\"number\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        \r\n                        margin=\"normal\"\r\n                        min=\"1\"\r\n                        variant=\"outlined\"\r\n                        style={{width: \"30%\", margin: \".5rem\"}}\r\n                        defaultValue={shortBreakTime}\r\n                        onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempShortBreakTime(parseInt(e.target.value)) :  setTempShortBreakTime(parseInt(shortBreakTime))}}\r\n                    />\r\n                    <TextField\r\n                        width='sm'\r\n                        id=\"outlined-number\"\r\n                        label=\"Long Break Time\"\r\n                        type=\"number\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        InputProps={{\r\n                            inputProps: { \r\n                                max: 60, min: 1\r\n                            }\r\n                        }}\r\n                    \r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        style={{width: \"30%\", margin: \".5rem\"}}\r\n                        defaultValue={longBreakTime}\r\n                        onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempLongBreakTime(parseInt(e.target.value)) :  setTempLongBreakTime(parseInt(longBreakTime))}}\r\n                    />\r\n                </div>\r\n\r\n                \r\n\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={updateValues} color=\"primary\">\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        \r\n        </Dialog>\r\n    );\r\n  }\r\n  \r\n  export default SettingsDialog;\r\n  ","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport SettingsDialog from \"./components/SettingsDialog\"\nimport { Divider, Typography, ButtonGroup, Button, Container } from '@material-ui/core';\n\nimport Timer from 'easytimer.js';\nimport 'fontsource-roboto';\n\nfunction App() {\n\n  const [timerType, setTimerType] = useState(\"pomodoro\");\n  const [pomodoroTime, setPomodoroTime] = useState(localStorage.getItem('pomodoroTime') ? parseInt(localStorage.getItem('pomodoroTime')): 25);\n  const [shortBreakTime, setShortBreakTime] = useState(localStorage.getItem('shortBreakTime') ? parseInt(localStorage.getItem('shortBreakTime')): 5);\n  const [longBreakTime, setLongBreakTime] = useState(localStorage.getItem('longBreakTime') ? parseInt(localStorage.getItem('longBreakTime')): 15);\n\n  const [timer] = useState(new Timer())\n  const [time, setTime] = useState(pomodoroTime);\n  const [clockMinutes, setClockMinutes] = useState(time);\n  const [clockSeconds, setClockSeconds] = useState(0);\n  const [isPaused, setIsPaused] = useState(true);\n\n  const zeroPad = (num, places) => String(num).padStart(places, '0');\n\n  useEffect(() => {\n    console.log(\"tick..\")\n    document.title = (clockMinutes+\":\"+zeroPad(clockSeconds, 2))\n    if ( (timer.getTimeValues().minutes<=0) && (timer.getTimeValues().seconds<=0) && (clockMinutes <= 0)){\n      console.log(\"done\")\n      \n      if (timerType === \"pomodoro\"){\n        setTimerType(\"shortBreak\")\n        console.log(\"completed pomodoro\")\n      }else{\n        setTimerType(\"pomodoro\")\n        console.log(\"completed break\")\n      }\n    }\n  }, [clockSeconds]);\n\n  useEffect(() => {\n    timer.addEventListener('secondsUpdated', function (e) {\n      setClockMinutes(timer.getTimeValues().minutes)\n      setClockSeconds(timer.getTimeValues().seconds)\n    });\n\n    timer.addEventListener('reset', function (e) {\n      setClockMinutes(timer.getTimeValues().minutes)\n      setClockSeconds(timer.getTimeValues().seconds)\n     \n    });\n  }, []);\n\n  useEffect(() => {\n\n    timer.stop();\n    if (timerType === \"pomodoro\"){\n      setTime(pomodoroTime);\n      timer.start({countdown: true, startValues: {minutes: pomodoroTime}});\n\n    }else if ( timerType === \"shortBreak\"){\n      setTime(shortBreakTime);\n      timer.start({countdown: true, startValues: {minutes: shortBreakTime}});\n\n    }else{\n      setTime(longBreakTime);\n      timer.start({countdown: true, startValues: {minutes: longBreakTime}});\n    }\n\n    timer.reset();\n    timer.pause();\n    setIsPaused(true);\n\n  }, [timerType]);\n\n\n\n  useEffect(() => {\n    localStorage.setItem('pomodoroTime', pomodoroTime);\n    localStorage.setItem('shortBreakTime', shortBreakTime);\n    localStorage.setItem('longBreakTime', longBreakTime);\n\n    var minutesGained\n    if (timerType === \"pomodoro\"){\n      setTime(pomodoroTime)\n      minutesGained = pomodoroTime - time;\n    }else if(timerType === \"shortBreak\"){\n      setTime(shortBreakTime)\n      minutesGained = shortBreakTime - time;\n    }else{\n      setTime(longBreakTime)\n      minutesGained = longBreakTime - time;\n    }\n\n    var mins = timer.getTimeValues().minutes\n    var secs = timer.getTimeValues().seconds\n\n    timer.stop();\n\n    console.log(\"Minutes: \"+ (mins + minutesGained))\n    console.log(\"Seconds: \"+ secs)\n\n    if( (((mins + minutesGained)<=0) && (secs <= 0)) || ( ((mins + minutesGained)<0) ) ){\n      console.log(\"Over\")\n      timer.start({countdown: true, startValues: {minutes: 0, seconds: 1}});\n    }else{\n      timer.start({countdown: true, startValues: {minutes: (mins + minutesGained), seconds: secs}});\n      setClockMinutes(mins + minutesGained)\n      setClockSeconds(secs) \n    }\n\n    if (isPaused){\n      timer.pause();\n    }\n    \n  }, [pomodoroTime, shortBreakTime, longBreakTime]);\n\n  var resetClock = function(){\n    timer.start({countdown: true, startValues: {minutes: time}});\n    timer.reset();\n    timer.pause();\n    setIsPaused(true);\n  }\n\n  var toggleStart = function(){\n    if (isPaused){\n      timer.start({countdown: true, startValues: {minutes: time}});\n      setIsPaused(false);\n    }else{\n      timer.pause();\n      setIsPaused(true);\n    }\n  }\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\">\n        <div style={{ textAlign: \"center\"}}>\n\n          <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"auto\", marginTop: \"auto\"}}>\n            <Typography variant='h5' style={{float: \"left\"}}>\n              Pomodoro \n            </Typography>\n\n            <Button style={{margin: \"1rem\"}} onClick={handleClickOpen} variant=\"contained\">Settings</Button>\n\n          </div>\n\n          <Divider variant=\"middle\" style={{marginBottom: \"1rem\"}}/>\n\n          <ButtonGroup variant=\"contained\" aria-label=\"contained primary button group\">\n            <Button onClick={()=>{setTimerType(\"pomodoro\")}} color={timerType === \"pomodoro\"? \"primary\": \"default\"}>Pomodoro</Button>\n            <Button onClick={()=>{setTimerType(\"shortBreak\")}} color={timerType === \"shortBreak\"? \"primary\": \"default\"}>Short Break</Button>\n            <Button onClick={()=>{setTimerType(\"longBreak\")}} color={timerType === \"longBreak\"? \"primary\": \"default\"}>Long Break</Button>\n          </ButtonGroup>\n\n          <Typography variant='h3'>\n            {clockMinutes} : {zeroPad(clockSeconds, 2)} \n          </Typography>\n\n          <Button style={{margin: \"1rem\"}} color=\"secondary\" onClick={toggleStart} variant=\"contained\">{isPaused ? \"Play\" : \"Pause\"}</Button>\n          <Button color=\"secondary\" onClick={resetClock} variant=\"contained\">Restart</Button>\n        </div>\n        \n        <SettingsDialog \n          pomodoroTime={pomodoroTime}\n          shortBreakTime={shortBreakTime}\n          longBreakTime={longBreakTime}\n\n          setPomodoroTime={setPomodoroTime}\n          setShortBreakTime={setShortBreakTime}\n          setLongBreakTime={setLongBreakTime}\n\n          open={open} \n          onClose={handleClose} />\n        \n      </Container>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}