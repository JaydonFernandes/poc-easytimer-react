[{"D:\\GitHub\\poc-easytimer-react\\src\\serviceWorkerRegistration.js":"1","D:\\GitHub\\poc-easytimer-react\\src\\reportWebVitals.js":"2","D:\\GitHub\\poc-easytimer-react\\src\\App.js":"3","D:\\GitHub\\poc-easytimer-react\\src\\index.js":"4","D:\\GitHub\\poc-easytimer-react\\src\\components\\SettingsDialog.js":"5"},{"size":5064,"mtime":1609306150490,"results":"6","hashOfConfig":"7"},{"size":364,"mtime":1609306150490,"results":"8","hashOfConfig":"7"},{"size":10092,"mtime":1612529183889,"results":"9","hashOfConfig":"7"},{"size":816,"mtime":1612529418409,"results":"10","hashOfConfig":"7"},{"size":9020,"mtime":1612529313258,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15nbowe",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"D:\\GitHub\\poc-easytimer-react\\src\\serviceWorkerRegistration.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\reportWebVitals.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\App.js",["23","24","25","26","27","28","29","30"],"D:\\GitHub\\poc-easytimer-react\\src\\index.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\components\\SettingsDialog.js",["31"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SettingsDialog(props) {\r\n\r\n    const { onClose, open, pomodoroTime, shortBreakTime, longBreakTime, longBreakInterval, autoStartRound, setPomodoroTime, setShortBreakTime, setLongBreakTime, setLongBreakInterval, setAutoStartRound } = props;\r\n\r\n    const [tempPomodoroTime, setTempPomodoroTime] = useState(pomodoroTime);\r\n    const [tempShortBreakTime, setTempShortBreakTime] = useState(shortBreakTime);\r\n    const [tempLongBreakTime, setTempLongBreakTime] = useState(longBreakTime);\r\n    const [tempLongBreakInterval, setTempLongBreakInterval] = useState(longBreakInterval)\r\n    const [tempAutoStartRound, setTempAutoStartRound] = useState(autoStartRound)\r\n\r\n    const [pomodoroValueError, setPomodoroValueError] = useState(false);\r\n    const [shortBreakValueError, setShortBreakValueError] = useState(false);\r\n    const [longBreakValueError, setLongBreakValueError] = useState(false);\r\n    const [longBreakIntervalValueError, setLongBreakIntervalValueError] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if((tempPomodoroTime >= 1) && (tempPomodoroTime <= 60)){\r\n            setPomodoroValueError(false)\r\n        }else{\r\n            setPomodoroValueError(true)\r\n        }\r\n\r\n        if((tempShortBreakTime >= 1) && (tempShortBreakTime <= 60)){\r\n            setShortBreakValueError(false)\r\n        }else{\r\n            setShortBreakValueError(true)\r\n        }\r\n\r\n        if((tempLongBreakTime >= 1) && (tempLongBreakTime <= 60)){\r\n            setLongBreakValueError(false)\r\n        }else{\r\n            setLongBreakValueError(true)\r\n        }\r\n\r\n        if(tempLongBreakInterval > 0){\r\n            setLongBreakIntervalValueError(false)\r\n        }else{\r\n            setLongBreakIntervalValueError(true)\r\n        }\r\n\r\n\r\n    }, [tempPomodoroTime, tempShortBreakTime, tempLongBreakTime, tempLongBreakInterval]);\r\n\r\n    const handleEnter = function(){\r\n        setTempPomodoroTime(pomodoroTime)\r\n        setTempShortBreakTime(shortBreakTime)\r\n        setTempLongBreakTime(longBreakTime)\r\n        setTempLongBreakInterval(longBreakInterval)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    const onSave = function(){\r\n\r\n        if ( (!pomodoroValueError) && (!shortBreakValueError) && (!longBreakValueError) && (!longBreakIntervalValueError)){\r\n            setPomodoroTime(tempPomodoroTime)\r\n            setShortBreakTime(tempShortBreakTime)\r\n            setLongBreakTime(tempLongBreakTime)\r\n            setLongBreakInterval(tempLongBreakInterval)\r\n            setAutoStartRound(tempAutoStartRound)\r\n\r\n\r\n            onClose();\r\n        }\r\n\r\n        \r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} onEnter={handleEnter} scroll=\"body\" aria-labelledby=\"settings-dialog-title\" open={open} >\r\n            <DialogTitle id=\"settings-dialog-title\">Settings</DialogTitle>\r\n            \r\n\r\n            <DialogContent >\r\n\r\n                <div>\r\n                    \r\n                    <Grid container spacing={1} justify=\"center\">\r\n                        <Grid item sm={4} xs={12} style={{textAlign: \"center\"}}>\r\n                            <TextField\r\n                                style={{width: \"100%\"}}\r\n                                label=\"Pomodoro Time\"\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n\r\n                                margin=\"normal\"\r\n                                error = {pomodoroValueError}\r\n                                helperText=\"Value must be from 1 to 60.\"\r\n                                variant=\"outlined\"\r\n                                defaultValue={pomodoroTime}\r\n                                onChange={(e)=>{ setTempPomodoroTime(parseInt(e.target.value)) }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={4} xs={12} style={{textAlign: \"center\"}}>\r\n                            <TextField\r\n                                style={{width: \"100%\"}}\r\n                                label=\"Short Break Time\"\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                \r\n                                margin=\"normal\"\r\n                                error = {shortBreakValueError}\r\n                                helperText=\"Value must be from 1 to 60.\"\r\n                                min=\"1\"\r\n                                variant=\"outlined\"\r\n                                defaultValue={shortBreakTime}\r\n                                onChange={(e)=>{ setTempShortBreakTime(parseInt(e.target.value))}}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={4} xs={12} style={{textAlign: \"center\"}}>\r\n                            <TextField\r\n                                style={{width: \"100%\"}}\r\n                                label=\"Long Break Time\"\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                margin=\"normal\"\r\n                                error = {longBreakValueError}\r\n                                helperText=\"Value must be from 1 to 60.\"\r\n                                variant=\"outlined\"\r\n                                defaultValue={longBreakTime}\r\n                                onChange={(e)=>{ setTempLongBreakTime(parseInt(e.target.value))}}\r\n                            />\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                    \r\n                    \r\n\r\n                    <Divider variant=\"middle\" style={{margin: \"1rem\"}}/>\r\n                        \r\n                    <div>\r\n\r\n                    <FormControlLabel\r\n                        control={\r\n                            <TextField\r\n                                width='sm'\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                InputProps={{\r\n                                    inputProps: { \r\n                                        max: 60, min: 1\r\n                                    }\r\n                                }}\r\n                                error={longBreakIntervalValueError}\r\n                                margin=\"normal\"\r\n                                style={{margin: \".5rem\"}}\r\n                                defaultValue={longBreakInterval}\r\n                                onChange={(e)=>{ setTempLongBreakInterval(parseInt(e.target.value))  }}\r\n                            />\r\n                        }\r\n                    \r\n                        label=\"Long Break Interval:\"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                        \r\n                        \r\n                    </div>\r\n\r\n                    <Divider variant=\"middle\" style={{margin: \"1rem\"}}/>\r\n                        \r\n                    <div>\r\n                        <FormControlLabel\r\n                            control={\r\n                            <Switch\r\n                                checked={tempAutoStartRound}\r\n                                onChange={(value)=>{setTempAutoStartRound(!tempAutoStartRound)}}\r\n                                name=\"checkedB\"\r\n                                color=\"primary\"\r\n                            />\r\n                            }\r\n                            label=\"Auto start next round?\"\r\n                            labelPlacement=\"start\"\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                \r\n\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={onSave} color=\"primary\">\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        \r\n        </Dialog>\r\n    );\r\n  }\r\n  \r\n  export default SettingsDialog;\r\n  ",{"ruleId":"32","severity":1,"message":"33","line":5,"column":10,"nodeType":"34","messageId":"35","endLine":5,"endColumn":17},{"ruleId":"32","severity":1,"message":"36","line":8,"column":8,"nodeType":"34","messageId":"35","endLine":8,"endColumn":19},{"ruleId":"32","severity":1,"message":"37","line":26,"column":3,"nodeType":"34","messageId":"35","endLine":26,"endColumn":22},{"ruleId":"32","severity":1,"message":"38","line":37,"column":17,"nodeType":"34","messageId":"35","endLine":37,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":84,"column":6,"nodeType":"41","endLine":84,"endColumn":34,"suggestions":"42"},{"ruleId":"39","severity":1,"message":"43","line":103,"column":6,"nodeType":"41","endLine":103,"endColumn":8,"suggestions":"44"},{"ruleId":"39","severity":1,"message":"45","line":136,"column":6,"nodeType":"41","endLine":136,"endColumn":17,"suggestions":"46"},{"ruleId":"39","severity":1,"message":"47","line":175,"column":6,"nodeType":"41","endLine":175,"endColumn":51,"suggestions":"48"},{"ruleId":"32","severity":1,"message":"49","line":16,"column":7,"nodeType":"34","messageId":"35","endLine":16,"endColumn":16},"no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'CardActions' is defined but never used.","'CircularProgressbar' is defined but never used.","'setTheme' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isPaused', 'longBreakInterval', 'playCompleteSfx', 'pomodorosComplete', 'time', 'timer', and 'timerType'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSecondsPassed' needs the current value of 'time'.","ArrayExpression",["50"],"React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.",["51"],"React Hook useEffect has missing dependencies: 'autoStartRound', 'clockMinutes', 'clockSeconds', 'longBreakTime', 'pomodoroTime', 'shortBreakTime', and 'timer'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTime' needs the current value of 'pomodoroTime'.",["52"],"React Hook useEffect has missing dependencies: 'isPaused', 'time', 'timer', and 'timerType'. Either include them or remove the dependency array.",["53"],"'useStyles' is assigned a value but never used.",{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [clockSeconds, clockMinutes, isPaused, timer, time, playCompleteSfx, timerType, pomodorosComplete, longBreakInterval]",{"range":"62","text":"63"},"Update the dependencies array to be: [timer]",{"range":"64","text":"65"},"Update the dependencies array to be: [autoStartRound, clockMinutes, clockSeconds, longBreakTime, pomodoroTime, shortBreakTime, timer, timerType]",{"range":"66","text":"67"},"Update the dependencies array to be: [pomodoroTime, shortBreakTime, longBreakTime, timerType, timer, isPaused, time]",{"range":"68","text":"69"},[3283,3311],"[clockSeconds, clockMinutes, isPaused, timer, time, playCompleteSfx, timerType, pomodorosComplete, longBreakInterval]",[4092,4094],"[timer]",[4896,4907],"[autoStartRound, clockMinutes, clockSeconds, longBreakTime, pomodoroTime, shortBreakTime, timer, timerType]",[6071,6116],"[pomodoroTime, shortBreakTime, longBreakTime, timerType, timer, isPaused, time]"]