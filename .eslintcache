[{"D:\\GitHub\\poc-easytimer-react\\src\\serviceWorkerRegistration.js":"1","D:\\GitHub\\poc-easytimer-react\\src\\reportWebVitals.js":"2","D:\\GitHub\\poc-easytimer-react\\src\\App.js":"3","D:\\GitHub\\poc-easytimer-react\\src\\index.js":"4","D:\\GitHub\\poc-easytimer-react\\src\\components\\SettingsDialog.js":"5"},{"size":5064,"mtime":1609306150490,"results":"6","hashOfConfig":"7"},{"size":364,"mtime":1609306150490,"results":"8","hashOfConfig":"7"},{"size":6161,"mtime":1612333544428,"results":"9","hashOfConfig":"7"},{"size":818,"mtime":1612236607518,"results":"10","hashOfConfig":"7"},{"size":4465,"mtime":1612334477874,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15nbowe",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"D:\\GitHub\\poc-easytimer-react\\src\\serviceWorkerRegistration.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\reportWebVitals.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\App.js",["23","24","25","26"],"D:\\GitHub\\poc-easytimer-react\\src\\index.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\components\\SettingsDialog.js",["27","28","29"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SettingsDialog(props) {\r\n\r\n    const { onClose, open, pomodoroTime, shortBreakTime, longBreakTime, setPomodoroTime, setShortBreakTime, setLongBreakTime } = props;\r\n\r\n    const [tempPomodoroTime, setTempPomodoroTime] = useState(pomodoroTime);\r\n    const [tempShortBreakTime, setTempShortBreakTime] = useState(shortBreakTime);\r\n    const [tempLongBreakTime, setTempLongBreakTime] = useState(longBreakTime);\r\n\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    const updateValues = function(){\r\n\r\n        setPomodoroTime(tempPomodoroTime)\r\n        setShortBreakTime(tempShortBreakTime)\r\n        setLongBreakTime(tempLongBreakTime)\r\n\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"settings-dialog-title\" open={open} >\r\n            <DialogTitle id=\"settings-dialog-title\">Settings</DialogTitle>\r\n            \r\n\r\n            <DialogContent style={{ textAlign: \"center\"}}>\r\n\r\n                <div>\r\n                    <TextField\r\n                        id=\"outlined-number\"\r\n                        label=\"Pomodoro Time\"\r\n                        type=\"number\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n\r\n                        margin=\"normal\"\r\n                        style={{width: \"30%\", margin: \".5rem\"}}\r\n                        variant=\"outlined\"\r\n                        defaultValue={pomodoroTime}\r\n                        onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempPomodoroTime(parseInt(e.target.value)) :  setTempPomodoroTime(parseInt(pomodoroTime))}}\r\n                    />\r\n                    <TextField\r\n                        id=\"outlined-number\"\r\n                        label=\"Short Break Time\"\r\n                        type=\"number\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        \r\n                        margin=\"normal\"\r\n                        min=\"1\"\r\n                        variant=\"outlined\"\r\n                        style={{width: \"30%\", margin: \".5rem\"}}\r\n                        defaultValue={shortBreakTime}\r\n                        onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempShortBreakTime(parseInt(e.target.value)) :  setTempShortBreakTime(parseInt(shortBreakTime))}}\r\n                    />\r\n                    <TextField\r\n                        width='sm'\r\n                        id=\"outlined-number\"\r\n                        label=\"Long Break Time\"\r\n                        type=\"number\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                        InputProps={{\r\n                            inputProps: { \r\n                                max: 60, min: 1\r\n                            }\r\n                        }}\r\n                    \r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        style={{width: \"30%\", margin: \".5rem\"}}\r\n                        defaultValue={longBreakTime}\r\n                        onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempLongBreakTime(parseInt(e.target.value)) :  setTempLongBreakTime(parseInt(longBreakTime))}}\r\n                    />\r\n                </div>\r\n\r\n                \r\n\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={updateValues} color=\"primary\">\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        \r\n        </Dialog>\r\n    );\r\n  }\r\n  \r\n  export default SettingsDialog;\r\n  ",{"ruleId":"30","severity":1,"message":"31","line":39,"column":6,"nodeType":"32","endLine":39,"endColumn":20,"suggestions":"33"},{"ruleId":"30","severity":1,"message":"34","line":52,"column":6,"nodeType":"32","endLine":52,"endColumn":8,"suggestions":"35"},{"ruleId":"30","severity":1,"message":"36","line":74,"column":6,"nodeType":"32","endLine":74,"endColumn":17,"suggestions":"37"},{"ruleId":"30","severity":1,"message":"38","line":116,"column":6,"nodeType":"32","endLine":116,"endColumn":51,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":27,"nodeType":"42","messageId":"43","endLine":1,"endColumn":36},{"ruleId":"40","severity":1,"message":"44","line":8,"column":8,"nodeType":"42","messageId":"43","endLine":8,"endColumn":25},{"ruleId":"40","severity":1,"message":"45","line":13,"column":7,"nodeType":"42","messageId":"43","endLine":13,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clockMinutes', 'timer', and 'timerType'. Either include them or remove the dependency array.","ArrayExpression",["46"],"React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.",["47"],"React Hook useEffect has missing dependencies: 'longBreakTime', 'pomodoroTime', 'shortBreakTime', and 'timer'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTime' needs the current value of 'pomodoroTime'.",["48"],"React Hook useEffect has missing dependencies: 'isPaused', 'time', 'timer', and 'timerType'. Either include them or remove the dependency array.",["49"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'DialogContentText' is defined but never used.","'useStyles' is assigned a value but never used.",{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},"Update the dependencies array to be: [clockMinutes, clockSeconds, timer, timerType]",{"range":"58","text":"59"},"Update the dependencies array to be: [timer]",{"range":"60","text":"61"},"Update the dependencies array to be: [longBreakTime, pomodoroTime, shortBreakTime, timer, timerType]",{"range":"62","text":"63"},"Update the dependencies array to be: [pomodoroTime, shortBreakTime, longBreakTime, timerType, timer, isPaused, time]",{"range":"64","text":"65"},[1594,1608],"[clockMinutes, clockSeconds, timer, timerType]",[1983,1985],"[timer]",[2515,2526],"[longBreakTime, pomodoroTime, shortBreakTime, timer, timerType]",[3703,3748],"[pomodoroTime, shortBreakTime, longBreakTime, timerType, timer, isPaused, time]"]