[{"D:\\GitHub\\poc-easytimer-react\\src\\serviceWorkerRegistration.js":"1","D:\\GitHub\\poc-easytimer-react\\src\\reportWebVitals.js":"2","D:\\GitHub\\poc-easytimer-react\\src\\App.js":"3","D:\\GitHub\\poc-easytimer-react\\src\\index.js":"4","D:\\GitHub\\poc-easytimer-react\\src\\components\\SettingsDialog.js":"5"},{"size":5064,"mtime":1609306150490,"results":"6","hashOfConfig":"7"},{"size":364,"mtime":1609306150490,"results":"8","hashOfConfig":"7"},{"size":9464,"mtime":1612405750348,"results":"9","hashOfConfig":"7"},{"size":818,"mtime":1612236607518,"results":"10","hashOfConfig":"7"},{"size":9784,"mtime":1612357770457,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15nbowe",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"D:\\GitHub\\poc-easytimer-react\\src\\serviceWorkerRegistration.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\reportWebVitals.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\App.js",["23","24","25","26","27","28","29"],"D:\\GitHub\\poc-easytimer-react\\src\\index.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\components\\SettingsDialog.js",["30","31"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SettingsDialog(props) {\r\n\r\n    const { onClose, open, pomodoroTime, shortBreakTime, longBreakTime, longBreakInterval, autoStartRound, setPomodoroTime, setShortBreakTime, setLongBreakTime, setLongBreakInterval, setAutoStartRound } = props;\r\n\r\n    const [tempPomodoroTime, setTempPomodoroTime] = useState(pomodoroTime);\r\n    const [tempShortBreakTime, setTempShortBreakTime] = useState(shortBreakTime);\r\n    const [tempLongBreakTime, setTempLongBreakTime] = useState(longBreakTime);\r\n    const [tempLongBreakInterval, setTempLongBreakInterval] = useState(longBreakInterval)\r\n    const [tempAutoStartRound, setTempAutoStartRound] = useState(autoStartRound)\r\n\r\n\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    const updateValues = function(){\r\n\r\n        setPomodoroTime(tempPomodoroTime)\r\n        setShortBreakTime(tempShortBreakTime)\r\n        setLongBreakTime(tempLongBreakTime)\r\n        setLongBreakInterval(tempLongBreakInterval)\r\n        setAutoStartRound(tempAutoStartRound)\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} scroll=\"body\" aria-labelledby=\"settings-dialog-title\" open={open} >\r\n            <DialogTitle id=\"settings-dialog-title\">Settings</DialogTitle>\r\n            \r\n\r\n            <DialogContent >\r\n\r\n                <div>\r\n                    \r\n                    <Grid container spacing={1} justify=\"center\">\r\n                        <Grid item sm={4} xs={12} style={{textAlign: \"center\"}}>\r\n                            <TextField\r\n                                style={{width: \"100%\"}}\r\n                                label=\"Pomodoro Time\"\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                defaultValue={pomodoroTime}\r\n                                onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempPomodoroTime(parseInt(e.target.value)) :  setTempPomodoroTime(parseInt(pomodoroTime))}}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={4} xs={12} style={{textAlign: \"center\"}}>\r\n                            <TextField\r\n                                style={{width: \"100%\"}}\r\n                                label=\"Short Break Time\"\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                \r\n                                margin=\"normal\"\r\n                                min=\"1\"\r\n                                variant=\"outlined\"\r\n                                defaultValue={shortBreakTime}\r\n                                onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempShortBreakTime(parseInt(e.target.value)) :  setTempShortBreakTime(parseInt(shortBreakTime))}}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={4} xs={12} style={{textAlign: \"center\"}}>\r\n                            <TextField\r\n                                style={{width: \"100%\"}}\r\n                                label=\"Long Break Time\"\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                defaultValue={longBreakTime}\r\n                                onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempLongBreakTime(parseInt(e.target.value)) :  setTempLongBreakTime(parseInt(longBreakTime))}}\r\n                            />\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                    \r\n                    {/* <div style={{textAlign: \"center\"}}>\r\n                        <TextField\r\n                            label=\"Pomodoro Time\"\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            defaultValue={pomodoroTime}\r\n                            onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempPomodoroTime(parseInt(e.target.value)) :  setTempPomodoroTime(parseInt(pomodoroTime))}}\r\n                        />\r\n                        <TextField\r\n                            label=\"Short Break Time\"\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            \r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            defaultValue={shortBreakTime}\r\n                            onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempShortBreakTime(parseInt(e.target.value)) :  setTempShortBreakTime(parseInt(shortBreakTime))}}\r\n                        />\r\n                        <TextField\r\n                            width='sm'\r\n                            label=\"Long Break Time\"\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            InputProps={{\r\n                                inputProps: { \r\n                                    max: 60, min: 1\r\n                                }\r\n                            }}\r\n                        \r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            defaultValue={longBreakTime}\r\n                            onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempLongBreakTime(parseInt(e.target.value)) :  setTempLongBreakTime(parseInt(longBreakTime))}}\r\n                        />\r\n                    </div> */}\r\n\r\n                    <Divider variant=\"middle\" style={{margin: \"1rem\"}}/>\r\n                        \r\n                    <div>\r\n\r\n                    <FormControlLabel\r\n                        control={\r\n                            <TextField\r\n                                width='sm'\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                InputProps={{\r\n                                    inputProps: { \r\n                                        max: 60, min: 1\r\n                                    }\r\n                                }}\r\n                            \r\n                                margin=\"normal\"\r\n                                style={{margin: \".5rem\"}}\r\n                                defaultValue={longBreakInterval}\r\n                                onChange={(e)=>{ (parseInt(e.target.value) >= 1) ? setTempLongBreakInterval(parseInt(e.target.value)) :  setTempLongBreakInterval(parseInt(longBreakInterval))}}\r\n                            />\r\n                        }\r\n                    \r\n                        label=\"Long Break Interval:\"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                        \r\n                        \r\n                    </div>\r\n\r\n                    <Divider variant=\"middle\" style={{margin: \"1rem\"}}/>\r\n                        \r\n                    <div>\r\n                        <FormControlLabel\r\n                            control={\r\n                            <Switch\r\n                                checked={tempAutoStartRound}\r\n                                onChange={(value)=>{setTempAutoStartRound(!tempAutoStartRound)}}\r\n                                name=\"checkedB\"\r\n                                color=\"primary\"\r\n                            />\r\n                            }\r\n                            label=\"Auto start next round?\"\r\n                            labelPlacement=\"start\"\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                \r\n\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={updateValues} color=\"primary\">\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        \r\n        </Dialog>\r\n    );\r\n  }\r\n  \r\n  export default SettingsDialog;\r\n  ",{"ruleId":"32","severity":1,"message":"33","line":5,"column":10,"nodeType":"34","messageId":"35","endLine":5,"endColumn":17},{"ruleId":"32","severity":1,"message":"36","line":7,"column":8,"nodeType":"34","messageId":"35","endLine":7,"endColumn":19},{"ruleId":"32","severity":1,"message":"37","line":25,"column":3,"nodeType":"34","messageId":"35","endLine":25,"endColumn":22},{"ruleId":"38","severity":1,"message":"39","line":83,"column":6,"nodeType":"40","endLine":83,"endColumn":34,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":102,"column":6,"nodeType":"40","endLine":102,"endColumn":8,"suggestions":"43"},{"ruleId":"38","severity":1,"message":"44","line":133,"column":6,"nodeType":"40","endLine":133,"endColumn":17,"suggestions":"45"},{"ruleId":"38","severity":1,"message":"46","line":172,"column":6,"nodeType":"40","endLine":172,"endColumn":51,"suggestions":"47"},{"ruleId":"32","severity":1,"message":"48","line":1,"column":27,"nodeType":"34","messageId":"35","endLine":1,"endColumn":36},{"ruleId":"32","severity":1,"message":"49","line":16,"column":7,"nodeType":"34","messageId":"35","endLine":16,"endColumn":16},"no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'CardActions' is defined but never used.","'CircularProgressbar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isPaused', 'longBreakInterval', 'playCompleteSfx', 'pomodorosComplete', 'secondsPassed', 'time', 'timer', and 'timerType'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSecondsPassed' needs the current value of 'time'.","ArrayExpression",["50"],"React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.",["51"],"React Hook useEffect has missing dependencies: 'autoStartRound', 'longBreakTime', 'pomodoroTime', 'shortBreakTime', and 'timer'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTime' needs the current value of 'pomodoroTime'.",["52"],"React Hook useEffect has missing dependencies: 'isPaused', 'time', 'timer', and 'timerType'. Either include them or remove the dependency array.",["53"],"'useEffect' is defined but never used.","'useStyles' is assigned a value but never used.",{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [clockSeconds, clockMinutes, secondsPassed, time, isPaused, timer, playCompleteSfx, timerType, pomodorosComplete, longBreakInterval]",{"range":"62","text":"63"},"Update the dependencies array to be: [timer]",{"range":"64","text":"65"},"Update the dependencies array to be: [autoStartRound, longBreakTime, pomodoroTime, shortBreakTime, timer, timerType]",{"range":"66","text":"67"},"Update the dependencies array to be: [pomodoroTime, shortBreakTime, longBreakTime, timerType, timer, isPaused, time]",{"range":"68","text":"69"},[3155,3183],"[clockSeconds, clockMinutes, secondsPassed, time, isPaused, timer, playCompleteSfx, timerType, pomodorosComplete, longBreakInterval]",[3805,3807],"[timer]",[4499,4510],"[autoStartRound, longBreakTime, pomodoroTime, shortBreakTime, timer, timerType]",[5598,5643],"[pomodoroTime, shortBreakTime, longBreakTime, timerType, timer, isPaused, time]"]