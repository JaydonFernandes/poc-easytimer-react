[{"D:\\GitHub\\poc-easytimer-react\\src\\serviceWorkerRegistration.js":"1","D:\\GitHub\\poc-easytimer-react\\src\\reportWebVitals.js":"2","D:\\GitHub\\poc-easytimer-react\\src\\App.js":"3","D:\\GitHub\\poc-easytimer-react\\src\\index.js":"4","D:\\GitHub\\poc-easytimer-react\\src\\components\\SettingsDialog.js":"5"},{"size":5064,"mtime":1609306150490,"results":"6","hashOfConfig":"7"},{"size":364,"mtime":1609306150490,"results":"8","hashOfConfig":"7"},{"size":7645,"mtime":1612340960937,"results":"9","hashOfConfig":"7"},{"size":818,"mtime":1612236607518,"results":"10","hashOfConfig":"7"},{"size":7153,"mtime":1612340249936,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15nbowe",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"D:\\GitHub\\poc-easytimer-react\\src\\serviceWorkerRegistration.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\reportWebVitals.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\App.js",["24","25","26","27"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport SettingsDialog from \"./components/SettingsDialog\"\nimport { Divider, Typography, ButtonGroup, Button, Container } from '@material-ui/core';\n\nimport Timer from 'easytimer.js';\nimport 'fontsource-roboto';\n\nimport useSound from 'use-sound';\nimport clickSfx from \"./assets/soundEffects/click.mp4\"\nimport completeSfx from \"./assets/soundEffects/complete.mp4\"\n\nfunction App() {\n\n  const [playClickSfx] = useSound(clickSfx);\n  const [playCompleteSfx] = useSound(completeSfx);\n\n  const [timerType, setTimerType] = useState(\"pomodoro\");\n  const [pomodoroTime, setPomodoroTime] = useState(localStorage.getItem('pomodoroTime') ? parseInt(localStorage.getItem('pomodoroTime')): 25);\n  const [shortBreakTime, setShortBreakTime] = useState(localStorage.getItem('shortBreakTime') ? parseInt(localStorage.getItem('shortBreakTime')): 5);\n  const [longBreakTime, setLongBreakTime] = useState(localStorage.getItem('longBreakTime') ? parseInt(localStorage.getItem('longBreakTime')): 15);\n\n  const [timer] = useState(new Timer())\n  const [time, setTime] = useState(pomodoroTime);\n  const [clockMinutes, setClockMinutes] = useState(time);\n  const [clockSeconds, setClockSeconds] = useState(0);\n  const [isPaused, setIsPaused] = useState(true);\n  const [longBreakInterval, setLongBreakInterval] = useState(localStorage.getItem('longBreakInterval') ? parseInt(localStorage.getItem('longBreakInterval')): 4);\n  const [pomodorosComplete, setPomodorosComplete] = useState(0);\n\n  const [autoStartRound, setAutoStartRound] = useState((localStorage.getItem('autoStartRound') === \"true\") ? true: false);\n\n  const zeroPad = (num, places) => String(num).padStart(places, '0');\n\n  useEffect(() => {\n    console.log(\"tick..\")\n    document.title = (clockMinutes+\":\"+zeroPad(clockSeconds, 2))\n    if ( (timer.getTimeValues().minutes<=0) && (timer.getTimeValues().seconds<=0) && (clockMinutes <= 0)){\n      playCompleteSfx();\n      console.log(\"done\")\n      \n      if (timerType === \"pomodoro\"){\n        setPomodorosComplete(pomodorosComplete + 1)\n\n        console.log(\"Modulo: \"+ ((pomodorosComplete + 1) % longBreakInterval))\n\n        if ( ((pomodorosComplete + 1) % longBreakInterval) === 0 ){\n          console.log(\"starting long break\")\n          setTimerType(\"longBreak\")\n        }else{\n          setTimerType(\"shortBreak\")\n        }\n        console.log(\"completed pomodoro\")\n      }else{\n        setTimerType(\"pomodoro\")\n        console.log(\"completed break\")\n      }\n    }\n  }, [clockSeconds]);\n\n  useEffect(() => {\n    timer.addEventListener('secondsUpdated', function (e) {\n      setClockMinutes(timer.getTimeValues().minutes)\n      setClockSeconds(timer.getTimeValues().seconds)\n    });\n\n    timer.addEventListener('reset', function (e) {\n      setClockMinutes(timer.getTimeValues().minutes)\n      setClockSeconds(timer.getTimeValues().seconds)\n     \n    });\n  }, []);\n\n  useEffect(() => {\n\n    timer.stop();\n    if (timerType === \"pomodoro\"){\n      setTime(pomodoroTime);\n      timer.start({countdown: true, startValues: {minutes: pomodoroTime}});\n\n    }else if ( timerType === \"shortBreak\"){\n      setTime(shortBreakTime);\n      timer.start({countdown: true, startValues: {minutes: shortBreakTime}});\n\n    }else{\n      setTime(longBreakTime);\n      timer.start({countdown: true, startValues: {minutes: longBreakTime}});\n    }\n\n    timer.reset();\n\n    if (!autoStartRound){\n      timer.pause();\n      setIsPaused(true);\n    }\n    \n\n  }, [timerType]);\n\n\n\n  useEffect(() => {\n    localStorage.setItem('pomodoroTime', pomodoroTime);\n    localStorage.setItem('shortBreakTime', shortBreakTime);\n    localStorage.setItem('longBreakTime', longBreakTime);\n\n    var minutesGained\n    if (timerType === \"pomodoro\"){\n      setTime(pomodoroTime)\n      minutesGained = pomodoroTime - time;\n    }else if(timerType === \"shortBreak\"){\n      setTime(shortBreakTime)\n      minutesGained = shortBreakTime - time;\n    }else{\n      setTime(longBreakTime)\n      minutesGained = longBreakTime - time;\n    }\n\n    var mins = timer.getTimeValues().minutes\n    var secs = timer.getTimeValues().seconds\n\n    timer.stop();\n\n    console.log(\"Minutes: \"+ (mins + minutesGained))\n    console.log(\"Seconds: \"+ secs)\n\n    if( (((mins + minutesGained)<=0) && (secs <= 0)) || ( ((mins + minutesGained)<0) ) ){\n      console.log(\"Over\")\n      timer.start({countdown: true, startValues: {minutes: 0, seconds: 1}});\n    }else{\n      timer.start({countdown: true, startValues: {minutes: (mins + minutesGained), seconds: secs}});\n      setClockMinutes(mins + minutesGained)\n      setClockSeconds(secs) \n    }\n\n    if (isPaused){\n      timer.pause();\n    }\n    \n  }, [pomodoroTime, shortBreakTime, longBreakTime]);\n\n  useEffect(() => {\n    localStorage.setItem('longBreakInterval', longBreakInterval);\n  }, [longBreakInterval]);\n\n  useEffect(() => {\n    console.log(\"updating auto start to \"+autoStartRound)\n    localStorage.setItem('autoStartRound', autoStartRound);\n  }, [autoStartRound]);\n\n  var resetClock = function(){\n    playClickSfx();\n    timer.start({countdown: true, startValues: {minutes: time}});\n    timer.reset();\n    timer.pause();\n    setIsPaused(true);\n  }\n\n  var toggleStart = function(){\n    playClickSfx();\n    if (isPaused){\n      timer.start({countdown: true, startValues: {minutes: time}});\n      setIsPaused(false);\n    }else{\n      timer.pause();\n      setIsPaused(true);\n    }\n  }\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\">\n        <div style={{ textAlign: \"center\"}}>\n\n          <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"auto\", marginTop: \"auto\"}}>\n            <Typography variant='h5' style={{float: \"left\"}}>\n              Pomodoro \n            </Typography>\n\n            <Button style={{margin: \"1rem\"}} onClick={handleClickOpen} variant=\"contained\">Settings</Button>\n\n          </div>\n\n          <Divider variant=\"middle\" style={{marginBottom: \"1rem\"}}/>\n\n          <ButtonGroup variant=\"contained\" aria-label=\"contained primary button group\">\n            <Button onClick={()=>{setTimerType(\"pomodoro\")}} color={timerType === \"pomodoro\"? \"primary\": \"default\"}>Pomodoro</Button>\n            <Button onClick={()=>{setTimerType(\"shortBreak\")}} color={timerType === \"shortBreak\"? \"primary\": \"default\"}>Short Break</Button>\n            <Button onClick={()=>{setTimerType(\"longBreak\")}} color={timerType === \"longBreak\"? \"primary\": \"default\"}>Long Break</Button>\n          </ButtonGroup>\n\n          <Typography variant='h3'>\n            {clockMinutes} : {zeroPad(clockSeconds, 2)} \n          </Typography>\n\n          <Button style={{margin: \"1rem\"}} color=\"secondary\" onClick={toggleStart} variant=\"contained\">{isPaused ? \"Play\" : \"Pause\"}</Button>\n          <Button color=\"secondary\" onClick={resetClock} variant=\"contained\">Restart</Button>\n        </div>\n        \n        <SettingsDialog \n          pomodoroTime={pomodoroTime}\n          shortBreakTime={shortBreakTime}\n          longBreakTime={longBreakTime}\n          longBreakInterval={longBreakInterval}\n          autoStartRound={autoStartRound}\n\n          setPomodoroTime={setPomodoroTime}\n          setShortBreakTime={setShortBreakTime}\n          setLongBreakTime={setLongBreakTime}\n          setLongBreakInterval={setLongBreakInterval}\n          setAutoStartRound={setAutoStartRound}\n\n          open={open} \n          onClose={handleClose} />\n        \n      </Container>\n     \n    </div>\n  );\n}\n\nexport default App;\n","D:\\GitHub\\poc-easytimer-react\\src\\index.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\components\\SettingsDialog.js",["28","29"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch'\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SettingsDialog(props) {\r\n\r\n    const { onClose, open, pomodoroTime, shortBreakTime, longBreakTime, longBreakInterval, autoStartRound, setPomodoroTime, setShortBreakTime, setLongBreakTime, setLongBreakInterval, setAutoStartRound } = props;\r\n\r\n    const [tempPomodoroTime, setTempPomodoroTime] = useState(pomodoroTime);\r\n    const [tempShortBreakTime, setTempShortBreakTime] = useState(shortBreakTime);\r\n    const [tempLongBreakTime, setTempLongBreakTime] = useState(longBreakTime);\r\n    const [tempLongBreakInterval, setTempLongBreakInterval] = useState(longBreakInterval)\r\n    const [tempAutoStartRound, setTempAutoStartRound] = useState(autoStartRound)\r\n\r\n\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    const updateValues = function(){\r\n\r\n        setPomodoroTime(tempPomodoroTime)\r\n        setShortBreakTime(tempShortBreakTime)\r\n        setLongBreakTime(tempLongBreakTime)\r\n        setLongBreakInterval(tempLongBreakInterval)\r\n        setAutoStartRound(tempAutoStartRound)\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"settings-dialog-title\" open={open} >\r\n            <DialogTitle id=\"settings-dialog-title\">Settings</DialogTitle>\r\n            \r\n\r\n            <DialogContent >\r\n\r\n                <div>\r\n                    \r\n                    <div style={{ textAlign: \"center\"}}>\r\n                        <TextField\r\n                            label=\"Pomodoro Time\"\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n\r\n                            margin=\"normal\"\r\n                            style={{width: \"30%\", margin: \".5rem\"}}\r\n                            variant=\"outlined\"\r\n                            defaultValue={pomodoroTime}\r\n                            onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempPomodoroTime(parseInt(e.target.value)) :  setTempPomodoroTime(parseInt(pomodoroTime))}}\r\n                        />\r\n                        <TextField\r\n                            label=\"Short Break Time\"\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            \r\n                            margin=\"normal\"\r\n                            min=\"1\"\r\n                            variant=\"outlined\"\r\n                            style={{width: \"30%\", margin: \".5rem\"}}\r\n                            defaultValue={shortBreakTime}\r\n                            onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempShortBreakTime(parseInt(e.target.value)) :  setTempShortBreakTime(parseInt(shortBreakTime))}}\r\n                        />\r\n                        <TextField\r\n                            width='sm'\r\n                            label=\"Long Break Time\"\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            InputProps={{\r\n                                inputProps: { \r\n                                    max: 60, min: 1\r\n                                }\r\n                            }}\r\n                        \r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            style={{width: \"30%\", margin: \".5rem\"}}\r\n                            defaultValue={longBreakTime}\r\n                            onChange={(e)=>{ (parseInt(e.target.value) >= 1) && ((parseInt(e.target.value) <= 60)) ? setTempLongBreakTime(parseInt(e.target.value)) :  setTempLongBreakTime(parseInt(longBreakTime))}}\r\n                        />\r\n                    </div>\r\n\r\n                    <Divider variant=\"middle\" style={{margin: \"1rem\"}}/>\r\n                        \r\n                    <div>\r\n\r\n                    <FormControlLabel\r\n                        control={\r\n                            <TextField\r\n                                width='sm'\r\n                                type=\"number\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                InputProps={{\r\n                                    inputProps: { \r\n                                        max: 60, min: 1\r\n                                    }\r\n                                }}\r\n                            \r\n                                margin=\"normal\"\r\n                                style={{margin: \".5rem\"}}\r\n                                defaultValue={longBreakInterval}\r\n                                onChange={(e)=>{ (parseInt(e.target.value) >= 1) ? setTempLongBreakInterval(parseInt(e.target.value)) :  setTempLongBreakInterval(parseInt(longBreakInterval))}}\r\n                            />\r\n                        }\r\n                    \r\n                        label=\"Long Break Interval:\"\r\n                        labelPlacement=\"start\"\r\n                    />\r\n                        \r\n                        \r\n                    </div>\r\n\r\n                    <Divider variant=\"middle\" style={{margin: \"1rem\"}}/>\r\n                        \r\n                    <div>\r\n                        <FormControlLabel\r\n                            control={\r\n                            <Switch\r\n                                checked={tempAutoStartRound}\r\n                                onChange={(value)=>{setTempAutoStartRound(!tempAutoStartRound)}}\r\n                                name=\"checkedB\"\r\n                                color=\"primary\"\r\n                            />\r\n                            }\r\n                            label=\"Auto start next round?\"\r\n                            labelPlacement=\"start\"\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                \r\n\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={updateValues} color=\"primary\">\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        \r\n        </Dialog>\r\n    );\r\n  }\r\n  \r\n  export default SettingsDialog;\r\n  ",{"ruleId":"30","severity":1,"message":"31","line":60,"column":6,"nodeType":"32","endLine":60,"endColumn":20,"suggestions":"33"},{"ruleId":"30","severity":1,"message":"34","line":73,"column":6,"nodeType":"32","endLine":73,"endColumn":8,"suggestions":"35"},{"ruleId":"30","severity":1,"message":"36","line":99,"column":6,"nodeType":"32","endLine":99,"endColumn":17,"suggestions":"37"},{"ruleId":"30","severity":1,"message":"38","line":141,"column":6,"nodeType":"32","endLine":141,"endColumn":51,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":27,"nodeType":"42","messageId":"43","endLine":1,"endColumn":36},{"ruleId":"40","severity":1,"message":"44","line":15,"column":7,"nodeType":"42","messageId":"43","endLine":15,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clockMinutes', 'longBreakInterval', 'playCompleteSfx', 'pomodorosComplete', 'timer', and 'timerType'. Either include them or remove the dependency array. You can also do a functional update 'setPomodorosComplete(p => ...)' if you only need 'pomodorosComplete' in the 'setPomodorosComplete' call.","ArrayExpression",["45"],"React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.",["46"],"React Hook useEffect has missing dependencies: 'autoStartRound', 'longBreakTime', 'pomodoroTime', 'shortBreakTime', and 'timer'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTime' needs the current value of 'pomodoroTime'.",["47"],"React Hook useEffect has missing dependencies: 'isPaused', 'time', 'timer', and 'timerType'. Either include them or remove the dependency array.",["48"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useStyles' is assigned a value but never used.",{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},"Update the dependencies array to be: [clockMinutes, clockSeconds, longBreakInterval, playCompleteSfx, pomodorosComplete, timer, timerType]",{"range":"57","text":"58"},"Update the dependencies array to be: [timer]",{"range":"59","text":"60"},"Update the dependencies array to be: [autoStartRound, longBreakTime, pomodoroTime, shortBreakTime, timer, timerType]",{"range":"61","text":"62"},"Update the dependencies array to be: [pomodoroTime, shortBreakTime, longBreakTime, timerType, timer, isPaused, time]",{"range":"63","text":"64"},[2527,2541],"[clockMinutes, clockSeconds, longBreakInterval, playCompleteSfx, pomodorosComplete, timer, timerType]",[2916,2918],"[timer]",[3490,3501],"[autoStartRound, longBreakTime, pomodoroTime, shortBreakTime, timer, timerType]",[4678,4723],"[pomodoroTime, shortBreakTime, longBreakTime, timerType, timer, isPaused, time]"]