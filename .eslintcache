[{"D:\\GitHub\\poc-easytimer-react\\src\\serviceWorkerRegistration.js":"1","D:\\GitHub\\poc-easytimer-react\\src\\reportWebVitals.js":"2","D:\\GitHub\\poc-easytimer-react\\src\\App.js":"3","D:\\GitHub\\poc-easytimer-react\\src\\index.js":"4","D:\\GitHub\\poc-easytimer-react\\src\\components\\SettingsDialog.js":"5"},{"size":5064,"mtime":1609306150490,"results":"6","hashOfConfig":"7"},{"size":364,"mtime":1609306150490,"results":"8","hashOfConfig":"7"},{"size":9257,"mtime":1612357283012,"results":"9","hashOfConfig":"7"},{"size":818,"mtime":1612236607518,"results":"10","hashOfConfig":"7"},{"size":9785,"mtime":1612357468855,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15nbowe",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\GitHub\\poc-easytimer-react\\src\\serviceWorkerRegistration.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\reportWebVitals.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\App.js",["23","24","25","26","27","28","29","30"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport SettingsDialog from \"./components/SettingsDialog\"\nimport { Divider, Typography, ButtonGroup, Button, Container } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport IconButton from '@material-ui/core/IconButton';\n\nimport PlayIcon from '@material-ui/icons/PlayArrowRounded';\nimport PauseIcon from '@material-ui/icons/PauseRounded';\nimport ReplayIcon from '@material-ui/icons/ReplayRounded';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nimport Timer from 'easytimer.js';\nimport 'fontsource-roboto';\n\nimport useSound from 'use-sound';\nimport clickSfx from \"./assets/soundEffects/click.mp4\"\nimport completeSfx from \"./assets/soundEffects/complete.mp4\"\n\nimport {\n  CircularProgressbar,\n  CircularProgressbarWithChildren,\n  buildStyles\n} from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nimport purple from '@material-ui/core/colors/';\n\nfunction App() {\n\n  const [playClickSfx] = useSound(clickSfx);\n  const [playCompleteSfx] = useSound(completeSfx);\n\n  const [timerType, setTimerType] = useState(\"pomodoro\");\n  const [pomodoroTime, setPomodoroTime] = useState(localStorage.getItem('pomodoroTime') ? parseInt(localStorage.getItem('pomodoroTime')): 25);\n  const [shortBreakTime, setShortBreakTime] = useState(localStorage.getItem('shortBreakTime') ? parseInt(localStorage.getItem('shortBreakTime')): 5);\n  const [longBreakTime, setLongBreakTime] = useState(localStorage.getItem('longBreakTime') ? parseInt(localStorage.getItem('longBreakTime')): 15);\n\n  const [timer] = useState(new Timer())\n  const [time, setTime] = useState(pomodoroTime);\n  const [clockMinutes, setClockMinutes] = useState(time);\n  const [clockSeconds, setClockSeconds] = useState(0);\n  const [isPaused, setIsPaused] = useState(true);\n  const [longBreakInterval, setLongBreakInterval] = useState(localStorage.getItem('longBreakInterval') ? parseInt(localStorage.getItem('longBreakInterval')): 4);\n  const [pomodorosComplete, setPomodorosComplete] = useState(0);\n  const [secondsPassed, setSecondsPassed] = useState(0);\n\n  const [autoStartRound, setAutoStartRound] = useState((localStorage.getItem('autoStartRound') === \"true\") ? true: false);\n\n  const zeroPad = (num, places) => String(num).padStart(places, '0');\n\n  useEffect(() => {\n    // document.title = (clockMinutes+\":\"+zeroPad(clockSeconds, 2))\n    \n    if(!isPaused){\n      setSecondsPassed( ((time*60)-( (clockMinutes*60)+clockSeconds)) )\n    }\n    \n    if ( (timer.getTimeValues().minutes<=0) && (timer.getTimeValues().seconds<=0) && (clockMinutes <= 0)){\n      playCompleteSfx();\n      \n      if (timerType === \"pomodoro\"){\n        setPomodorosComplete(pomodorosComplete + 1)\n\n        \n\n\n        if ( ((pomodorosComplete + 1) % longBreakInterval) === 0 ){\n          setTimerType(\"longBreak\")\n        }else{\n          setTimerType(\"shortBreak\")\n        }\n      }else{\n        setTimerType(\"pomodoro\")\n      }\n    }\n  }, [clockSeconds, clockMinutes]);\n\n  useEffect(() => {\n  }, [secondsPassed]);\n\n  useEffect(() => {\n    timer.addEventListener('secondsUpdated', function (e) {\n      setClockMinutes(timer.getTimeValues().minutes)\n      setClockSeconds(timer.getTimeValues().seconds)\n\n      document.title = (timer.getTimeValues().minutes+\":\"+zeroPad(timer.getTimeValues().seconds, 2))\n    });\n\n    timer.addEventListener('reset', function (e) {\n      setClockMinutes(timer.getTimeValues().minutes)\n      setClockSeconds(timer.getTimeValues().seconds)\n      document.title = (timer.getTimeValues().minutes+\":\"+zeroPad(timer.getTimeValues().seconds, 2))\n     \n    });\n  }, []);\n\n  useEffect(() => {\n\n    timer.stop();\n    if (timerType === \"pomodoro\"){\n      setTime(pomodoroTime);\n      timer.start({countdown: true, startValues: {minutes: pomodoroTime}});\n      setSecondsPassed(0)\n\n    }else if ( timerType === \"shortBreak\"){\n      setTime(shortBreakTime);\n      timer.start({countdown: true, startValues: {minutes: shortBreakTime}});\n      setSecondsPassed(0)\n\n    }else{\n      setTime(longBreakTime);\n      timer.start({countdown: true, startValues: {minutes: longBreakTime}});\n      setSecondsPassed(0)\n    }\n\n    timer.reset();\n\n    if (!autoStartRound){\n      timer.pause();\n      setIsPaused(true);\n    }\n    \n\n  }, [timerType]);\n\n\n\n  useEffect(() => {\n    localStorage.setItem('pomodoroTime', pomodoroTime);\n    localStorage.setItem('shortBreakTime', shortBreakTime);\n    localStorage.setItem('longBreakTime', longBreakTime);\n\n    var minutesGained\n    if (timerType === \"pomodoro\"){\n      setTime(pomodoroTime)\n      minutesGained = pomodoroTime - time;\n    }else if(timerType === \"shortBreak\"){\n      setTime(shortBreakTime)\n      minutesGained = shortBreakTime - time;\n    }else{\n      setTime(longBreakTime)\n      minutesGained = longBreakTime - time;\n    }\n\n    var mins = timer.getTimeValues().minutes\n    var secs = timer.getTimeValues().seconds\n\n    timer.stop();\n\n    if( (((mins + minutesGained)<=0) && (secs <= 0)) || ( ((mins + minutesGained)<0) ) ){\n      timer.start({countdown: true, startValues: {minutes: 0, seconds: 1}});\n      setSecondsPassed(0)\n    }else{\n      timer.start({countdown: true, startValues: {minutes: (mins + minutesGained), seconds: secs}});\n      setClockMinutes(mins + minutesGained)\n      setClockSeconds(secs) \n    }\n\n    if (isPaused){\n      timer.pause();\n    }\n    \n  }, [pomodoroTime, shortBreakTime, longBreakTime]);\n\n  useEffect(() => {\n    localStorage.setItem('longBreakInterval', longBreakInterval);\n  }, [longBreakInterval]);\n\n  useEffect(() => {\n    localStorage.setItem('autoStartRound', autoStartRound);\n  }, [autoStartRound]);\n\n  var resetClock = function(){\n    timer.stop()\n    playClickSfx();\n    setSecondsPassed(0)\n    timer.start({countdown: true, startValues: {minutes: time}});\n    timer.reset();\n    timer.pause();\n    setIsPaused(true);\n  }\n\n  var toggleStart = function(){\n    playClickSfx();\n    if (isPaused){\n      timer.start({countdown: true, startValues: {minutes: time}});\n      setIsPaused(false);\n    }else{\n      timer.pause();\n      setIsPaused(true);\n    }\n  }\n\n  function PlayPauseButton(props) {\n    if (isPaused) {\n      return <IconButton aria-label=\"Play\" onClick={toggleStart}><PlayIcon style={{ fontSize: 60 }}/></IconButton>\n    }\n    return <IconButton aria-label=\"Pause\"  onClick={toggleStart}><PauseIcon style={{ fontSize: 60 }}/></IconButton>\n  }\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"App\" style={{ minHeight: \"100%\"}} >\n      <Container maxWidth=\"md\">\n\n        <div style={{ textAlign: \"center\"}}>\n\n          <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"auto\", marginTop: \"auto\"}}>\n\n            <h1 style={{fontFamily: 'Roboto'}}>\n              Pomodoro\n            </h1>\n\n            <Button  startIcon={<SettingsIcon />} style={{margin: \"1rem\"}} onClick={handleClickOpen} variant=\"contained\">Settings</Button>\n\n          </div>\n\n          <Card style={{backgroundColor:\"whitesmoke\"}}>\n            <CardContent>\n              <ButtonGroup variant=\"contained\" aria-label=\"contained primary button group\" style={{marginBottom: \"1rem\", width: \"100%\"}}>\n                <Button onClick={()=>{setTimerType(\"pomodoro\")}} style={{width: \"100%\"}} color={timerType === \"pomodoro\"? \"primary\": \"default\"}>Pomodoro</Button>\n                <Button onClick={()=>{setTimerType(\"shortBreak\")}} style={{width: \"100%\"}} color={timerType === \"shortBreak\"? \"primary\": \"default\"}>Short Break</Button>\n                <Button onClick={()=>{setTimerType(\"longBreak\")}} style={{width: \"100%\"}} color={timerType === \"longBreak\"? \"primary\": \"default\"}>Long Break</Button>\n              </ButtonGroup>\n\n              \n\n              <CircularProgressbarWithChildren\n                value={( (secondsPassed)/(time*60))*100}\n                styles={buildStyles({\n                  pathColor: \"#3f51b5\",\n                })}\n                >\n\n                <Typography variant='h1'>\n                  {clockMinutes} : {zeroPad(clockSeconds, 2)} \n                </Typography>\n              </CircularProgressbarWithChildren>\n\n              <PlayPauseButton onClick={toggleStart}/>\n              <IconButton aria-label=\"Replay\" onClick={resetClock}><ReplayIcon style={{ fontSize: 60 }}/></IconButton>\n\n            </CardContent>\n          </Card>\n\n        </div>\n\n        \n        \n       \n        \n      </Container>\n      <SettingsDialog \n          pomodoroTime={pomodoroTime}\n          shortBreakTime={shortBreakTime}\n          longBreakTime={longBreakTime}\n          longBreakInterval={longBreakInterval}\n          autoStartRound={autoStartRound}\n\n          setPomodoroTime={setPomodoroTime}\n          setShortBreakTime={setShortBreakTime}\n          setLongBreakTime={setLongBreakTime}\n          setLongBreakInterval={setLongBreakInterval}\n          setAutoStartRound={setAutoStartRound}\n\n          open={open} \n          onClose={handleClose} />\n     \n    </div>\n  );\n}\n\nexport default App;\n","D:\\GitHub\\poc-easytimer-react\\src\\index.js",[],"D:\\GitHub\\poc-easytimer-react\\src\\components\\SettingsDialog.js",["31","32"],{"ruleId":"33","severity":1,"message":"34","line":5,"column":10,"nodeType":"35","messageId":"36","endLine":5,"endColumn":17},{"ruleId":"33","severity":1,"message":"37","line":7,"column":8,"nodeType":"35","messageId":"36","endLine":7,"endColumn":19},{"ruleId":"33","severity":1,"message":"38","line":25,"column":3,"nodeType":"35","messageId":"36","endLine":25,"endColumn":22},{"ruleId":"33","severity":1,"message":"39","line":31,"column":8,"nodeType":"35","messageId":"36","endLine":31,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":81,"column":6,"nodeType":"42","endLine":81,"endColumn":34,"suggestions":"43"},{"ruleId":"40","severity":1,"message":"44","line":100,"column":6,"nodeType":"42","endLine":100,"endColumn":8,"suggestions":"45"},{"ruleId":"40","severity":1,"message":"46","line":129,"column":6,"nodeType":"42","endLine":129,"endColumn":17,"suggestions":"47"},{"ruleId":"40","severity":1,"message":"48","line":168,"column":6,"nodeType":"42","endLine":168,"endColumn":51,"suggestions":"49"},{"ruleId":"33","severity":1,"message":"50","line":1,"column":27,"nodeType":"35","messageId":"36","endLine":1,"endColumn":36},{"ruleId":"33","severity":1,"message":"51","line":16,"column":7,"nodeType":"35","messageId":"36","endLine":16,"endColumn":16},"no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'CardActions' is defined but never used.","'CircularProgressbar' is defined but never used.","'purple' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isPaused', 'longBreakInterval', 'playCompleteSfx', 'pomodorosComplete', 'time', 'timer', and 'timerType'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSecondsPassed' needs the current value of 'time'.","ArrayExpression",["52"],"React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.",["53"],"React Hook useEffect has missing dependencies: 'autoStartRound', 'longBreakTime', 'pomodoroTime', 'shortBreakTime', and 'timer'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTime' needs the current value of 'pomodoroTime'.",["54"],"React Hook useEffect has missing dependencies: 'isPaused', 'time', 'timer', and 'timerType'. Either include them or remove the dependency array.",["55"],"'useEffect' is defined but never used.","'useStyles' is assigned a value but never used.",{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [clockSeconds, clockMinutes, isPaused, timer, time, playCompleteSfx, timerType, pomodorosComplete, longBreakInterval]",{"range":"64","text":"65"},"Update the dependencies array to be: [timer]",{"range":"66","text":"67"},"Update the dependencies array to be: [autoStartRound, longBreakTime, pomodoroTime, shortBreakTime, timer, timerType]",{"range":"68","text":"69"},"Update the dependencies array to be: [pomodoroTime, shortBreakTime, longBreakTime, timerType, timer, isPaused, time]",{"range":"70","text":"71"},[3114,3142],"[clockSeconds, clockMinutes, isPaused, timer, time, playCompleteSfx, timerType, pomodorosComplete, longBreakInterval]",[3764,3766],"[timer]",[4416,4427],"[autoStartRound, longBreakTime, pomodoroTime, shortBreakTime, timer, timerType]",[5515,5560],"[pomodoroTime, shortBreakTime, longBreakTime, timerType, timer, isPaused, time]"]